

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Jul 16 17:02:41 2022

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,inline
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    32                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    33  0000                     
    34                           ; Version 2.10
    35                           ; Generated 31/07/2019 GMT
    36                           ; 
    37                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC18F4550 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     _PORTDbits	set	3971
    69  0000                     _TMR2	set	4044
    70  0000                     _INTCONbits	set	4082
    71  0000                     _T2CONbits	set	4042
    72  0000                     _TRISD	set	3989
    73  0000                     _TRISBbits	set	3987
    74  0000                     _INT0IF	set	32657
    75  0000                     _INTEDG0	set	32654
    76                           
    77                           	psect	smallconst
    78  000800                     __psmallconst:
    79                           	opt callstack 0
    80  000800  00                 	db	0
    81  000801                     STR_1:
    82  000801  63                 	db	99	;'c'
    83  000802  6F                 	db	111	;'o'
    84  000803  6E                 	db	110	;'n'
    85  000804  74                 	db	116	;'t'
    86  000805  61                 	db	97	;'a'
    87  000806  67                 	db	103	;'g'
    88  000807  65                 	db	101	;'e'
    89  000808  6D                 	db	109	;'m'
    90  000809  20                 	db	32
    91  00080A  3D                 	db	61	;'='
    92  00080B  20                 	db	32
    93  00080C  25                 	db	37
    94  00080D  64                 	db	100	;'d'
    95  00080E  00                 	db	0
    96  00080F                     STR_2:
    97  00080F  70                 	db	112	;'p'
    98  000810  65                 	db	101	;'e'
    99  000811  72                 	db	114	;'r'
   100  000812  69                 	db	105	;'i'
   101  000813  6F                 	db	111	;'o'
   102  000814  64                 	db	100	;'d'
   103  000815  6F                 	db	111	;'o'
   104  000816  20                 	db	32
   105  000817  3D                 	db	61	;'='
   106  000818  20                 	db	32
   107  000819  25                 	db	37
   108  00081A  64                 	db	100	;'d'
   109  00081B  00                 	db	0
   110                           
   111                           ; #config settings
   112  00081C  00                 	db	0	; dummy byte at the end
   113  0000                     
   114                           	psect	cinit
   115  001452                     __pcinit:
   116                           	opt callstack 0
   117  001452                     start_initialization:
   118                           	opt callstack 0
   119  001452                     __initialization:
   120                           	opt callstack 0
   121                           
   122                           ; Clear objects allocated to BANK0 (41 bytes)
   123  001452  EE00  F060         	lfsr	0,__pbssBANK0
   124  001456  0E29               	movlw	41
   125  001458                     clear_0:
   126  001458  6AEE               	clrf	postinc0,c
   127  00145A  06E8               	decf	wreg,f,c
   128  00145C  E1FD               	bnz	clear_0
   129  00145E                     end_of_initialization:
   130                           	opt callstack 0
   131  00145E                     __end_of__initialization:
   132                           	opt callstack 0
   133  00145E  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   134  001460  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   135  001462  0E00               	movlw	low (__Lsmallconst shr (0+16))
   136  001464  6EF8               	movwf	tblptru,c
   137  001466  0E08               	movlw	high __Lsmallconst
   138  001468  6EF7               	movwf	tblptrh,c
   139  00146A  0100               	movlb	0
   140  00146C  EF03  F009         	goto	_main	;jump to C main() function
   141                           
   142                           	psect	bssBANK0
   143  000060                     __pbssBANK0:
   144                           	opt callstack 0
   145  000060                     _nout:
   146                           	opt callstack 0
   147  000060                     	ds	2
   148  000062                     _width:
   149                           	opt callstack 0
   150  000062                     	ds	2
   151  000064                     _prec:
   152                           	opt callstack 0
   153  000064                     	ds	2
   154  000066                     _flags:
   155                           	opt callstack 0
   156  000066                     	ds	2
   157  000068                     _contador:
   158                           	opt callstack 0
   159  000068                     	ds	1
   160  000069                     _dbuf:
   161                           	opt callstack 0
   162  000069                     	ds	32
   163                           
   164                           	psect	cstackBANK0
   165  000089                     __pcstackBANK0:
   166                           	opt callstack 0
   167  000089                     ?_printf:
   168                           	opt callstack 0
   169  000089                     printf@fmt:
   170                           	opt callstack 0
   171                           
   172                           ; 2 bytes @ 0x0
   173  000089                     	ds	6
   174  00008F                     printf@ap:
   175                           	opt callstack 0
   176                           
   177                           ; 2 bytes @ 0x6
   178  00008F                     	ds	2
   179                           
   180                           	psect	cstackCOMRAM
   181  000001                     __pcstackCOMRAM:
   182                           	opt callstack 0
   183  000001                     ??_envia_nibble_lcd:
   184  000001                     ?_strlen:
   185                           	opt callstack 0
   186  000001                     ?___aodiv:
   187                           	opt callstack 0
   188  000001                     ?___aomod:
   189                           	opt callstack 0
   190  000001                     strlen@s:
   191                           	opt callstack 0
   192  000001                     ___aodiv@dividend:
   193                           	opt callstack 0
   194  000001                     ___aomod@dividend:
   195                           	opt callstack 0
   196                           
   197                           ; 8 bytes @ 0x0
   198  000001                     	ds	1
   199  000002                     envia_nibble_lcd@dado:
   200                           	opt callstack 0
   201                           
   202                           ; 1 bytes @ 0x1
   203  000002                     	ds	1
   204  000003                     envia_byte_lcd@dado:
   205                           	opt callstack 0
   206  000003                     strlen@a:
   207                           	opt callstack 0
   208                           
   209                           ; 2 bytes @ 0x2
   210  000003                     	ds	1
   211  000004                     envia_byte_lcd@endereco:
   212                           	opt callstack 0
   213                           
   214                           ; 1 bytes @ 0x3
   215  000004                     	ds	1
   216  000005                     ??_inicializa_lcd:
   217  000005                     escreve_lcd@c:
   218                           	opt callstack 0
   219  000005                     caracter_inicio@coluna:
   220                           	opt callstack 0
   221                           
   222                           ; 1 bytes @ 0x4
   223  000005                     	ds	1
   224  000006                     putch@data:
   225                           	opt callstack 0
   226  000006                     caracter_inicio@linha:
   227                           	opt callstack 0
   228                           
   229                           ; 1 bytes @ 0x5
   230  000006                     	ds	1
   231  000007                     caracter_inicio@posicao:
   232                           	opt callstack 0
   233  000007                     fputc@c:
   234                           	opt callstack 0
   235                           
   236                           ; 2 bytes @ 0x6
   237  000007                     	ds	2
   238  000009                     fputc@fp:
   239                           	opt callstack 0
   240  000009                     ___aodiv@divisor:
   241                           	opt callstack 0
   242  000009                     ___aomod@divisor:
   243                           	opt callstack 0
   244                           
   245                           ; 8 bytes @ 0x8
   246  000009                     	ds	2
   247  00000B                     ??_fputc:
   248                           
   249                           ; 1 bytes @ 0xA
   250  00000B                     	ds	5
   251  000010                     fputs@s:
   252                           	opt callstack 0
   253                           
   254                           ; 2 bytes @ 0xF
   255  000010                     	ds	1
   256  000011                     ___aodiv@counter:
   257                           	opt callstack 0
   258  000011                     ___aomod@counter:
   259                           	opt callstack 0
   260                           
   261                           ; 1 bytes @ 0x10
   262  000011                     	ds	1
   263  000012                     ___aodiv@sign:
   264                           	opt callstack 0
   265  000012                     ___aomod@sign:
   266                           	opt callstack 0
   267  000012                     fputs@fp:
   268                           	opt callstack 0
   269                           
   270                           ; 2 bytes @ 0x11
   271  000012                     	ds	1
   272  000013                     ?_abs:
   273                           	opt callstack 0
   274  000013                     abs@a:
   275                           	opt callstack 0
   276  000013                     ___aodiv@quotient:
   277                           	opt callstack 0
   278                           
   279                           ; 8 bytes @ 0x12
   280  000013                     	ds	1
   281  000014                     fputs@c:
   282                           	opt callstack 0
   283                           
   284                           ; 1 bytes @ 0x13
   285  000014                     	ds	1
   286  000015                     ??_abs:
   287  000015                     fputs@i:
   288                           	opt callstack 0
   289                           
   290                           ; 2 bytes @ 0x14
   291  000015                     	ds	2
   292  000017                     ?_pad:
   293                           	opt callstack 0
   294  000017                     pad@fp:
   295                           	opt callstack 0
   296                           
   297                           ; 2 bytes @ 0x16
   298  000017                     	ds	2
   299  000019                     pad@buf:
   300                           	opt callstack 0
   301                           
   302                           ; 2 bytes @ 0x18
   303  000019                     	ds	2
   304  00001B                     pad@p:
   305                           	opt callstack 0
   306                           
   307                           ; 2 bytes @ 0x1A
   308  00001B                     	ds	2
   309  00001D                     ??_pad:
   310                           
   311                           ; 1 bytes @ 0x1C
   312  00001D                     	ds	1
   313  00001E                     pad@i:
   314                           	opt callstack 0
   315                           
   316                           ; 2 bytes @ 0x1D
   317  00001E                     	ds	2
   318  000020                     pad@w:
   319                           	opt callstack 0
   320                           
   321                           ; 2 bytes @ 0x1F
   322  000020                     	ds	2
   323  000022                     ?_dtoa:
   324                           	opt callstack 0
   325  000022                     dtoa@fp:
   326                           	opt callstack 0
   327                           
   328                           ; 2 bytes @ 0x21
   329  000022                     	ds	2
   330  000024                     dtoa@d:
   331                           	opt callstack 0
   332                           
   333                           ; 8 bytes @ 0x23
   334  000024                     	ds	8
   335  00002C                     ??_dtoa:
   336                           
   337                           ; 1 bytes @ 0x2B
   338  00002C                     	ds	8
   339  000034                     _dtoa$354:
   340                           	opt callstack 0
   341                           
   342                           ; 2 bytes @ 0x33
   343  000034                     	ds	2
   344  000036                     dtoa@p:
   345                           	opt callstack 0
   346                           
   347                           ; 2 bytes @ 0x35
   348  000036                     	ds	2
   349  000038                     dtoa@w:
   350                           	opt callstack 0
   351                           
   352                           ; 2 bytes @ 0x37
   353  000038                     	ds	2
   354  00003A                     dtoa@s:
   355                           	opt callstack 0
   356                           
   357                           ; 2 bytes @ 0x39
   358  00003A                     	ds	2
   359  00003C                     dtoa@n:
   360                           	opt callstack 0
   361                           
   362                           ; 8 bytes @ 0x3B
   363  00003C                     	ds	8
   364  000044                     dtoa@i:
   365                           	opt callstack 0
   366                           
   367                           ; 2 bytes @ 0x43
   368  000044                     	ds	2
   369  000046                     ?_vfpfcnvrt:
   370                           	opt callstack 0
   371  000046                     vfpfcnvrt@fp:
   372                           	opt callstack 0
   373                           
   374                           ; 2 bytes @ 0x45
   375  000046                     	ds	2
   376  000048                     vfpfcnvrt@fmt:
   377                           	opt callstack 0
   378                           
   379                           ; 2 bytes @ 0x47
   380  000048                     	ds	2
   381  00004A                     vfpfcnvrt@ap:
   382                           	opt callstack 0
   383                           
   384                           ; 2 bytes @ 0x49
   385  00004A                     	ds	2
   386  00004C                     ??_vfpfcnvrt:
   387                           
   388                           ; 1 bytes @ 0x4B
   389  00004C                     	ds	2
   390  00004E                     vfpfcnvrt@ll:
   391                           	opt callstack 0
   392                           
   393                           ; 8 bytes @ 0x4D
   394  00004E                     	ds	8
   395  000056                     ?_vfprintf:
   396                           	opt callstack 0
   397  000056                     vfprintf@fp:
   398                           	opt callstack 0
   399                           
   400                           ; 2 bytes @ 0x55
   401  000056                     	ds	2
   402  000058                     vfprintf@fmt:
   403                           	opt callstack 0
   404                           
   405                           ; 2 bytes @ 0x57
   406  000058                     	ds	2
   407  00005A                     vfprintf@ap:
   408                           	opt callstack 0
   409                           
   410                           ; 2 bytes @ 0x59
   411  00005A                     	ds	2
   412  00005C                     vfprintf@cfmt:
   413                           	opt callstack 0
   414                           
   415                           ; 2 bytes @ 0x5B
   416  00005C                     	ds	2
   417  00005E                     ??_main:
   418                           
   419                           ; 1 bytes @ 0x5D
   420  00005E                     	ds	1
   421                           
   422 ;;
   423 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   424 ;;
   425 ;; *************** function _main *****************
   426 ;; Defined at:
   427 ;;		line 32 in file "LarguraDePulsoMain.c"
   428 ;; Parameters:    Size  Location     Type
   429 ;;		None
   430 ;; Auto vars:     Size  Location     Type
   431 ;;		None
   432 ;; Return value:  Size  Location     Type
   433 ;;                  1    wreg      void 
   434 ;; Registers used:
   435 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   436 ;; Tracked objects:
   437 ;;		On entry : 0/0
   438 ;;		On exit  : 0/0
   439 ;;		Unchanged: 0/0
   440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   441 ;;      Params:         0       0       0       0       0       0       0       0       0
   442 ;;      Locals:         0       0       0       0       0       0       0       0       0
   443 ;;      Temps:          1       0       0       0       0       0       0       0       0
   444 ;;      Totals:         1       0       0       0       0       0       0       0       0
   445 ;;Total ram usage:        1 bytes
   446 ;; Hardware stack levels required when called:   12
   447 ;; This function calls:
   448 ;;		_caracter_inicio
   449 ;;		_inicializa_lcd
   450 ;;		_printf
   451 ;; This function is called by:
   452 ;;		Startup code after reset
   453 ;; This function uses a non-reentrant model
   454 ;;
   455                           
   456                           	psect	text0
   457  001206                     __ptext0:
   458                           	opt callstack 0
   459  001206                     _main:
   460                           	opt callstack 19
   461  001206                     
   462                           ;LarguraDePulsoMain.c: 34:     TRISBbits.RB0 = 1;
   463  001206  8093               	bsf	147,0,c	;volatile
   464                           
   465                           ;LarguraDePulsoMain.c: 35:     INTEDG0 = 1;
   466  001208  8CF1               	bsf	4081,6,c	;volatile
   467  00120A                     
   468                           ;LarguraDePulsoMain.c: 37:     TRISD = 0x00;
   469  00120A  0E00               	movlw	0
   470  00120C  6E95               	movwf	149,c	;volatile
   471  00120E                     
   472                           ;LarguraDePulsoMain.c: 38:     inicializa_lcd();
   473  00120E  ECC2  F008         	call	_inicializa_lcd	;wreg free
   474  001212                     
   475                           ;LarguraDePulsoMain.c: 40:     T2CONbits.T2CKPS0 = 1;
   476  001212  80CA               	bsf	202,0,c	;volatile
   477  001214                     
   478                           ;LarguraDePulsoMain.c: 41:     T2CONbits.T2CKPS1 = 1;
   479  001214  82CA               	bsf	202,1,c	;volatile
   480  001216                     
   481                           ;LarguraDePulsoMain.c: 43:     T2CONbits.TMR2ON = 1;
   482  001216  84CA               	bsf	202,2,c	;volatile
   483  001218                     
   484                           ;LarguraDePulsoMain.c: 45:     INTCONbits.GIE = 1;
   485  001218  8EF2               	bsf	242,7,c	;volatile
   486  00121A                     
   487                           ;LarguraDePulsoMain.c: 46:     INTCONbits.INT0IE = 1;
   488  00121A  88F2               	bsf	242,4,c	;volatile
   489  00121C                     l1539:
   490                           
   491                           ;LarguraDePulsoMain.c: 49:      _delay((unsigned long)((10)*(4000000/4000.0)));
   492  00121C  0E0D               	movlw	13
   493  00121E  6E5E               	movwf	??_main^0,c
   494  001220  0EFC               	movlw	252
   495  001222                     u997:
   496  001222  2EE8               	decfsz	wreg,f,c
   497  001224  D7FE               	bra	u997
   498  001226  2E5E               	decfsz	??_main^0,f,c
   499  001228  D7FC               	bra	u997
   500  00122A                     
   501                           ;LarguraDePulsoMain.c: 50:      caracter_inicio(1,1);
   502  00122A  0E01               	movlw	1
   503  00122C  6E05               	movwf	caracter_inicio@coluna^0,c
   504  00122E  0E01               	movlw	1
   505  001230  EC8D  F009         	call	_caracter_inicio
   506  001234                     
   507                           ;LarguraDePulsoMain.c: 51:      printf("contagem = %d",contador);
   508  001234  0E01               	movlw	low STR_1
   509  001236  0100               	movlb	0	; () banked
   510  001238  6F89               	movwf	printf@fmt& (0+255),b
   511  00123A  0E08               	movlw	high STR_1
   512  00123C  6F8A               	movwf	(printf@fmt+1)& (0+255),b
   513  00123E  C068  F08B         	movff	_contador,?_printf+2
   514  001242  6B8C               	clrf	(?_printf+3)& (0+255),b
   515  001244  EC03  F00A         	call	_printf	;wreg free
   516  001248                     
   517                           ;LarguraDePulsoMain.c: 52:      caracter_inicio(2,1);
   518  001248  0E01               	movlw	1
   519  00124A  6E05               	movwf	caracter_inicio@coluna^0,c
   520  00124C  0E02               	movlw	2
   521  00124E  EC8D  F009         	call	_caracter_inicio
   522  001252                     
   523                           ;LarguraDePulsoMain.c: 53:      printf("periodo = %d",16*contador);
   524  001252  0E0F               	movlw	low STR_2
   525  001254  0100               	movlb	0	; () banked
   526  001256  6F89               	movwf	printf@fmt& (0+255),b
   527  001258  0E08               	movlw	high STR_2
   528  00125A  6F8A               	movwf	(printf@fmt+1)& (0+255),b
   529  00125C  5168               	movf	_contador& (0+255),w,b
   530  00125E  0D10               	mullw	16
   531  001260  CFF3 F08B          	movff	prodl,?_printf+2
   532  001264  CFF4 F08C          	movff	prodh,?_printf+3
   533  001268  EC03  F00A         	call	_printf	;wreg free
   534  00126C  EF0E  F009         	goto	l1539
   535  001270  EF07  F000         	goto	start
   536  001274                     __end_of_main:
   537                           	opt callstack 0
   538                           
   539 ;; *************** function _printf *****************
   540 ;; Defined at:
   541 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\printf.c"
   542 ;; Parameters:    Size  Location     Type
   543 ;;  fmt             2    0[BANK0 ] PTR const unsigned char 
   544 ;;		 -> STR_2(13), STR_1(14), 
   545 ;; Auto vars:     Size  Location     Type
   546 ;;  ap              2    6[BANK0 ] PTR void [1]
   547 ;;		 -> ?_printf(2), 
   548 ;;  ret             2    0        int 
   549 ;; Return value:  Size  Location     Type
   550 ;;                  2    0[BANK0 ] int 
   551 ;; Registers used:
   552 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   553 ;; Tracked objects:
   554 ;;		On entry : 0/0
   555 ;;		On exit  : 0/0
   556 ;;		Unchanged: 0/0
   557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   558 ;;      Params:         0       4       0       0       0       0       0       0       0
   559 ;;      Locals:         0       4       0       0       0       0       0       0       0
   560 ;;      Temps:          0       0       0       0       0       0       0       0       0
   561 ;;      Totals:         0       8       0       0       0       0       0       0       0
   562 ;;Total ram usage:        8 bytes
   563 ;; Hardware stack levels used:    1
   564 ;; Hardware stack levels required when called:   11
   565 ;; This function calls:
   566 ;;		_vfprintf
   567 ;; This function is called by:
   568 ;;		_main
   569 ;; This function uses a non-reentrant model
   570 ;;
   571                           
   572                           	psect	text1
   573  001406                     __ptext1:
   574                           	opt callstack 0
   575  001406                     _printf:
   576                           	opt callstack 19
   577  001406  0E8B               	movlw	low (?_printf+2)
   578  001408  0100               	movlb	0	; () banked
   579  00140A  6F8F               	movwf	printf@ap& (0+255),b
   580  00140C  0E00               	movlw	high (?_printf+2)
   581  00140E  6F90               	movwf	(printf@ap+1)& (0+255),b
   582  001410                     
   583                           ; BSR set to: 0
   584  001410  0E00               	movlw	0
   585  001412  6E56               	movwf	vfprintf@fp^0,c
   586  001414  0E00               	movlw	0
   587  001416  6E57               	movwf	(vfprintf@fp+1)^0,c
   588  001418  C089  F058         	movff	printf@fmt,vfprintf@fmt
   589  00141C  C08A  F059         	movff	printf@fmt+1,vfprintf@fmt+1
   590  001420  0E8F               	movlw	low printf@ap
   591  001422  6E5A               	movwf	vfprintf@ap^0,c
   592  001424  0E00               	movlw	high printf@ap
   593  001426  6E5B               	movwf	(vfprintf@ap+1)^0,c
   594  001428  EC3A  F009         	call	_vfprintf	;wreg free
   595  00142C  0012               	return		;funcret
   596  00142E                     __end_of_printf:
   597                           	opt callstack 0
   598                           
   599 ;; *************** function _vfprintf *****************
   600 ;; Defined at:
   601 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
   602 ;; Parameters:    Size  Location     Type
   603 ;;  fp              2   85[COMRAM] PTR struct _IO_FILE
   604 ;;		 -> NULL(0), 
   605 ;;  fmt             2   87[COMRAM] PTR const unsigned char 
   606 ;;		 -> STR_2(13), STR_1(14), 
   607 ;;  ap              2   89[COMRAM] PTR PTR void 
   608 ;;		 -> printf@ap(2), 
   609 ;; Auto vars:     Size  Location     Type
   610 ;;  cfmt            2   91[COMRAM] PTR unsigned char 
   611 ;;		 -> STR_2(13), STR_1(14), 
   612 ;; Return value:  Size  Location     Type
   613 ;;                  2   85[COMRAM] int 
   614 ;; Registers used:
   615 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   616 ;; Tracked objects:
   617 ;;		On entry : 0/0
   618 ;;		On exit  : 0/0
   619 ;;		Unchanged: 0/0
   620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   621 ;;      Params:         6       0       0       0       0       0       0       0       0
   622 ;;      Locals:         2       0       0       0       0       0       0       0       0
   623 ;;      Temps:          0       0       0       0       0       0       0       0       0
   624 ;;      Totals:         8       0       0       0       0       0       0       0       0
   625 ;;Total ram usage:        8 bytes
   626 ;; Hardware stack levels used:    1
   627 ;; Hardware stack levels required when called:   10
   628 ;; This function calls:
   629 ;;		_vfpfcnvrt
   630 ;; This function is called by:
   631 ;;		_printf
   632 ;; This function uses a non-reentrant model
   633 ;;
   634                           
   635                           	psect	text2
   636  001274                     __ptext2:
   637                           	opt callstack 0
   638  001274                     _vfprintf:
   639                           	opt callstack 19
   640  001274                     
   641                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.1
      +                          0\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.10\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
   642  001274  C058  F05C         	movff	vfprintf@fmt,vfprintf@cfmt
   643  001278  C059  F05D         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   644  00127C                     
   645                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
   646  00127C  0E00               	movlw	0
   647  00127E  0100               	movlb	0	; () banked
   648  001280  6F61               	movwf	(_nout+1)& (0+255),b
   649  001282  0E00               	movlw	0
   650  001284  6F60               	movwf	_nout& (0+255),b
   651                           
   652                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   653  001286  EF58  F009         	goto	l1479
   654  00128A                     l1477:
   655                           
   656                           ; BSR set to: 0
   657                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
   658  00128A  C056  F046         	movff	vfprintf@fp,vfpfcnvrt@fp
   659  00128E  C057  F047         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   660  001292  0E5C               	movlw	low vfprintf@cfmt
   661  001294  6E48               	movwf	vfpfcnvrt@fmt^0,c
   662  001296  0E00               	movlw	high vfprintf@cfmt
   663  001298  6E49               	movwf	(vfpfcnvrt@fmt+1)^0,c
   664  00129A  C05A  F04A         	movff	vfprintf@ap,vfpfcnvrt@ap
   665  00129E  C05B  F04B         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   666  0012A2  EC80  F005         	call	_vfpfcnvrt	;wreg free
   667  0012A6  5046               	movf	?_vfpfcnvrt^0,w,c
   668  0012A8  0100               	movlb	0	; () banked
   669  0012AA  2760               	addwf	_nout& (0+255),f,b
   670  0012AC  5047               	movf	(?_vfpfcnvrt+1)^0,w,c
   671  0012AE  2361               	addwfc	(_nout+1)& (0+255),f,b
   672  0012B0                     l1479:
   673                           
   674                           ; BSR set to: 0
   675                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
   676  0012B0  C05C  FFF6         	movff	vfprintf@cfmt,tblptrl
   677  0012B4  C05D  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   678  0012B8                     	if	0	;tblptru may be non-zero
   679  0012B8                     	endif
   680  0012B8                     	if	0	;tblptru may be non-zero
   681  0012B8                     	endif
   682  0012B8  0008               	tblrd		*
   683  0012BA  50F5               	movf	tablat,w,c
   684  0012BC  0900               	iorlw	0
   685  0012BE  A4D8               	btfss	status,2,c
   686  0012C0  EF64  F009         	goto	u941
   687  0012C4  EF66  F009         	goto	u940
   688  0012C8                     u941:
   689  0012C8  EF45  F009         	goto	l1477
   690  0012CC                     u940:
   691  0012CC                     
   692                           ; BSR set to: 0
   693                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
   694  0012CC  C060  F056         	movff	_nout,?_vfprintf
   695  0012D0  C061  F057         	movff	_nout+1,?_vfprintf+1
   696  0012D4                     
   697                           ; BSR set to: 0
   698  0012D4  0012               	return		;funcret
   699  0012D6                     __end_of_vfprintf:
   700                           	opt callstack 0
   701                           
   702 ;; *************** function _vfpfcnvrt *****************
   703 ;; Defined at:
   704 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
   705 ;; Parameters:    Size  Location     Type
   706 ;;  fp              2   69[COMRAM] PTR struct _IO_FILE
   707 ;;		 -> NULL(0), 
   708 ;;  fmt             2   71[COMRAM] PTR PTR unsigned char 
   709 ;;		 -> vfprintf@cfmt(2), 
   710 ;;  ap              2   73[COMRAM] PTR PTR void 
   711 ;;		 -> printf@ap(2), 
   712 ;; Auto vars:     Size  Location     Type
   713 ;;  ll              8   77[COMRAM] long long 
   714 ;;  llu             8    0        unsigned long long 
   715 ;;  f               4    0        unsigned long long 
   716 ;;  vp              3    0        PTR void 
   717 ;;  ct              3    0        unsigned char [3]
   718 ;;  cp              3    0        PTR unsigned char 
   719 ;;  i               2    0        int 
   720 ;;  done            2    0        int 
   721 ;;  c               1    0        unsigned char 
   722 ;; Return value:  Size  Location     Type
   723 ;;                  2   69[COMRAM] int 
   724 ;; Registers used:
   725 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   726 ;; Tracked objects:
   727 ;;		On entry : 0/0
   728 ;;		On exit  : 0/0
   729 ;;		Unchanged: 0/0
   730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   731 ;;      Params:         6       0       0       0       0       0       0       0       0
   732 ;;      Locals:         8       0       0       0       0       0       0       0       0
   733 ;;      Temps:          2       0       0       0       0       0       0       0       0
   734 ;;      Totals:        16       0       0       0       0       0       0       0       0
   735 ;;Total ram usage:       16 bytes
   736 ;; Hardware stack levels used:    1
   737 ;; Hardware stack levels required when called:    9
   738 ;; This function calls:
   739 ;;		_dtoa
   740 ;;		_fputc
   741 ;; This function is called by:
   742 ;;		_vfprintf
   743 ;; This function uses a non-reentrant model
   744 ;;
   745                           
   746                           	psect	text3
   747  000B00                     __ptext3:
   748                           	opt callstack 0
   749  000B00                     _vfpfcnvrt:
   750                           	opt callstack 19
   751  000B00                     
   752                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.10\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.10\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 674:     long long ll;
   753  000B00  C048  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   754  000B04  C049  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   755  000B08  CFDE FFF6          	movff	postinc2,tblptrl
   756  000B0C  CFDD FFF7          	movff	postdec2,tblptrh
   757  000B10                     	if	0	;tblptru may be non-zero
   758  000B10                     	endif
   759  000B10                     	if	0	;tblptru may be non-zero
   760  000B10                     	endif
   761  000B10  0008               	tblrd		*
   762  000B12  50F5               	movf	tablat,w,c
   763  000B14  0A25               	xorlw	37
   764  000B16  A4D8               	btfss	status,2,c
   765  000B18  EF90  F005         	goto	u901
   766  000B1C  EF92  F005         	goto	u900
   767  000B20                     u901:
   768  000B20  EF3E  F006         	goto	l1465
   769  000B24                     u900:
   770  000B24                     
   771                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
   772  000B24  C048  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   773  000B28  C049  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   774  000B2C  2ADE               	incf	postinc2,f,c
   775  000B2E  0E00               	movlw	0
   776  000B30  22DD               	addwfc	postdec2,f,c
   777  000B32                     
   778                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
   779  000B32  0E00               	movlw	0
   780  000B34  0100               	movlb	0	; () banked
   781  000B36  6F63               	movwf	(_width+1)& (0+255),b
   782  000B38  0E00               	movlw	0
   783  000B3A  6F62               	movwf	_width& (0+255),b
   784  000B3C  C062  F066         	movff	_width,_flags
   785  000B40  C063  F067         	movff	_width+1,_flags+1
   786  000B44                     
   787                           ; BSR set to: 0
   788                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
   789  000B44  6964               	setf	_prec& (0+255),b
   790  000B46  6965               	setf	(_prec+1)& (0+255),b
   791  000B48                     
   792                           ; BSR set to: 0
   793                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
   794  000B48  C048  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   795  000B4C  C049  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   796  000B50  CFDE FFF6          	movff	postinc2,tblptrl
   797  000B54  CFDD FFF7          	movff	postdec2,tblptrh
   798  000B58                     	if	0	;tblptru may be non-zero
   799  000B58                     	endif
   800  000B58                     	if	0	;tblptru may be non-zero
   801  000B58                     	endif
   802  000B58  0008               	tblrd		*
   803  000B5A  50F5               	movf	tablat,w,c
   804  000B5C  0A64               	xorlw	100
   805  000B5E  B4D8               	btfsc	status,2,c
   806  000B60  EFB4  F005         	goto	u911
   807  000B64  EFB6  F005         	goto	u910
   808  000B68                     u911:
   809  000B68  EFC8  F005         	goto	l1443
   810  000B6C                     u910:
   811  000B6C                     
   812                           ; BSR set to: 0
   813  000B6C  C048  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   814  000B70  C049  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   815  000B74  CFDE FFF6          	movff	postinc2,tblptrl
   816  000B78  CFDD FFF7          	movff	postdec2,tblptrh
   817  000B7C                     	if	0	;tblptru may be non-zero
   818  000B7C                     	endif
   819  000B7C                     	if	0	;tblptru may be non-zero
   820  000B7C                     	endif
   821  000B7C  0008               	tblrd		*
   822  000B7E  50F5               	movf	tablat,w,c
   823  000B80  0A69               	xorlw	105
   824  000B82  A4D8               	btfss	status,2,c
   825  000B84  EFC6  F005         	goto	u921
   826  000B88  EFC8  F005         	goto	u920
   827  000B8C                     u921:
   828  000B8C  EF08  F006         	goto	l1449
   829  000B90                     u920:
   830  000B90                     l1443:
   831                           
   832                           ; BSR set to: 0
   833                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
   834  000B90  C048  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   835  000B94  C049  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   836  000B98  2ADE               	incf	postinc2,f,c
   837  000B9A  0E00               	movlw	0
   838  000B9C  22DD               	addwfc	postdec2,f,c
   839                           
   840                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
   841  000B9E  C04A  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   842  000BA2  C04B  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   843  000BA6  CFDF F04C          	movff	indf2,??_vfpfcnvrt
   844  000BAA  0E02               	movlw	2
   845  000BAC  26DE               	addwf	postinc2,f,c
   846  000BAE  CFDF F04D          	movff	indf2,??_vfpfcnvrt+1
   847  000BB2  0E00               	movlw	0
   848  000BB4  22DD               	addwfc	postdec2,f,c
   849  000BB6  C04C  FFD9         	movff	??_vfpfcnvrt,fsr2l
   850  000BBA  C04D  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
   851  000BBE  CFDE F04E          	movff	postinc2,vfpfcnvrt@ll
   852  000BC2  CFDD F04F          	movff	postdec2,vfpfcnvrt@ll+1
   853  000BC6  0E00               	movlw	0
   854  000BC8  BE4F               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
   855  000BCA  0EFF               	movlw	-1
   856  000BCC  6E50               	movwf	(vfpfcnvrt@ll+2)^0,c
   857  000BCE  6E51               	movwf	(vfpfcnvrt@ll+3)^0,c
   858  000BD0  6E52               	movwf	(vfpfcnvrt@ll+4)^0,c
   859  000BD2  6E53               	movwf	(vfpfcnvrt@ll+5)^0,c
   860  000BD4  6E54               	movwf	(vfpfcnvrt@ll+6)^0,c
   861  000BD6  6E55               	movwf	(vfpfcnvrt@ll+7)^0,c
   862  000BD8                     
   863                           ; BSR set to: 0
   864                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
   865  000BD8  C046  F022         	movff	vfpfcnvrt@fp,dtoa@fp
   866  000BDC  C047  F023         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
   867  000BE0  C04E  F024         	movff	vfpfcnvrt@ll,dtoa@d
   868  000BE4  C04F  F025         	movff	vfpfcnvrt@ll+1,dtoa@d+1
   869  000BE8  C050  F026         	movff	vfpfcnvrt@ll+2,dtoa@d+2
   870  000BEC  C051  F027         	movff	vfpfcnvrt@ll+3,dtoa@d+3
   871  000BF0  C052  F028         	movff	vfpfcnvrt@ll+4,dtoa@d+4
   872  000BF4  C053  F029         	movff	vfpfcnvrt@ll+5,dtoa@d+5
   873  000BF8  C054  F02A         	movff	vfpfcnvrt@ll+6,dtoa@d+6
   874  000BFC  C055  F02B         	movff	vfpfcnvrt@ll+7,dtoa@d+7
   875  000C00  EC0F  F004         	call	_dtoa	;wreg free
   876  000C04  C022  F046         	movff	?_dtoa,?_vfpfcnvrt
   877  000C08  C023  F047         	movff	?_dtoa+1,?_vfpfcnvrt+1
   878  000C0C  EF59  F006         	goto	l134
   879  000C10                     l1449:
   880                           
   881                           ; BSR set to: 0
   882                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
   883  000C10  C048  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   884  000C14  C049  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   885  000C18  CFDE FFF6          	movff	postinc2,tblptrl
   886  000C1C  CFDD FFF7          	movff	postdec2,tblptrh
   887  000C20                     	if	0	;tblptru may be non-zero
   888  000C20                     	endif
   889  000C20                     	if	0	;tblptru may be non-zero
   890  000C20                     	endif
   891  000C20  0008               	tblrd		*
   892  000C22  50F5               	movf	tablat,w,c
   893  000C24  0A25               	xorlw	37
   894  000C26  A4D8               	btfss	status,2,c
   895  000C28  EF18  F006         	goto	u931
   896  000C2C  EF1A  F006         	goto	u930
   897  000C30                     u931:
   898  000C30  EF31  F006         	goto	l1459
   899  000C34                     u930:
   900  000C34                     
   901                           ; BSR set to: 0
   902                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
   903  000C34  C048  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   904  000C38  C049  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   905  000C3C  2ADE               	incf	postinc2,f,c
   906  000C3E  0E00               	movlw	0
   907  000C40  22DD               	addwfc	postdec2,f,c
   908  000C42                     
   909                           ; BSR set to: 0
   910                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
   911  000C42  0E00               	movlw	0
   912  000C44  6E08               	movwf	(fputc@c+1)^0,c
   913  000C46  0E25               	movlw	37
   914  000C48  6E07               	movwf	fputc@c^0,c
   915  000C4A  C046  F009         	movff	vfpfcnvrt@fp,fputc@fp
   916  000C4E  C047  F00A         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   917  000C52  EC33  F008         	call	_fputc	;wreg free
   918  000C56                     l1455:
   919                           
   920                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
   921  000C56  0E00               	movlw	0
   922  000C58  6E47               	movwf	(?_vfpfcnvrt+1)^0,c
   923  000C5A  0E01               	movlw	1
   924  000C5C  6E46               	movwf	?_vfpfcnvrt^0,c
   925  000C5E  EF59  F006         	goto	l134
   926  000C62                     l1459:
   927                           
   928                           ; BSR set to: 0
   929                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
   930  000C62  C048  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   931  000C66  C049  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   932  000C6A  2ADE               	incf	postinc2,f,c
   933  000C6C  0E00               	movlw	0
   934  000C6E  22DD               	addwfc	postdec2,f,c
   935  000C70                     
   936                           ; BSR set to: 0
   937                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
   938  000C70  0E00               	movlw	0
   939  000C72  6E47               	movwf	(?_vfpfcnvrt+1)^0,c
   940  000C74  0E00               	movlw	0
   941  000C76  6E46               	movwf	?_vfpfcnvrt^0,c
   942  000C78  EF59  F006         	goto	l134
   943  000C7C                     l1465:
   944                           
   945                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
   946  000C7C  C048  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   947  000C80  C049  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   948  000C84  CFDE FFF6          	movff	postinc2,tblptrl
   949  000C88  CFDD FFF7          	movff	postdec2,tblptrh
   950  000C8C                     	if	0	;tblptru may be non-zero
   951  000C8C                     	endif
   952  000C8C                     	if	0	;tblptru may be non-zero
   953  000C8C                     	endif
   954  000C8C  0008               	tblrd		*
   955  000C8E  50F5               	movf	tablat,w,c
   956  000C90  6E07               	movwf	fputc@c^0,c
   957  000C92  6A08               	clrf	(fputc@c+1)^0,c
   958  000C94  C046  F009         	movff	vfpfcnvrt@fp,fputc@fp
   959  000C98  C047  F00A         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   960  000C9C  EC33  F008         	call	_fputc	;wreg free
   961  000CA0                     
   962                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
   963  000CA0  C048  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   964  000CA4  C049  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   965  000CA8  2ADE               	incf	postinc2,f,c
   966  000CAA  0E00               	movlw	0
   967  000CAC  22DD               	addwfc	postdec2,f,c
   968  000CAE  EF2B  F006         	goto	l1455
   969  000CB2                     l134:
   970  000CB2  0012               	return		;funcret
   971  000CB4                     __end_of_vfpfcnvrt:
   972                           	opt callstack 0
   973                           
   974 ;; *************** function _dtoa *****************
   975 ;; Defined at:
   976 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
   977 ;; Parameters:    Size  Location     Type
   978 ;;  fp              2   33[COMRAM] PTR struct _IO_FILE
   979 ;;		 -> NULL(0), 
   980 ;;  d               8   35[COMRAM] long long 
   981 ;; Auto vars:     Size  Location     Type
   982 ;;  n               8   59[COMRAM] long long 
   983 ;;  i               2   67[COMRAM] int 
   984 ;;  s               2   57[COMRAM] int 
   985 ;;  w               2   55[COMRAM] int 
   986 ;;  p               2   53[COMRAM] int 
   987 ;; Return value:  Size  Location     Type
   988 ;;                  2   33[COMRAM] int 
   989 ;; Registers used:
   990 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   991 ;; Tracked objects:
   992 ;;		On entry : 0/0
   993 ;;		On exit  : 0/0
   994 ;;		Unchanged: 0/0
   995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   996 ;;      Params:        10       0       0       0       0       0       0       0       0
   997 ;;      Locals:        18       0       0       0       0       0       0       0       0
   998 ;;      Temps:          8       0       0       0       0       0       0       0       0
   999 ;;      Totals:        36       0       0       0       0       0       0       0       0
  1000 ;;Total ram usage:       36 bytes
  1001 ;; Hardware stack levels used:    1
  1002 ;; Hardware stack levels required when called:    8
  1003 ;; This function calls:
  1004 ;;		___aodiv
  1005 ;;		___aomod
  1006 ;;		_abs
  1007 ;;		_pad
  1008 ;; This function is called by:
  1009 ;;		_vfpfcnvrt
  1010 ;; This function uses a non-reentrant model
  1011 ;;
  1012                           
  1013                           	psect	text4
  1014  00081E                     __ptext4:
  1015                           	opt callstack 0
  1016  00081E                     _dtoa:
  1017                           	opt callstack 19
  1018  00081E                     
  1019                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.10\pic\sources\c99\common\doprnt.c: 280:     n = d;
  1020  00081E  C024  F03C         	movff	dtoa@d,dtoa@n
  1021  000822  C025  F03D         	movff	dtoa@d+1,dtoa@n+1
  1022  000826  C026  F03E         	movff	dtoa@d+2,dtoa@n+2
  1023  00082A  C027  F03F         	movff	dtoa@d+3,dtoa@n+3
  1024  00082E  C028  F040         	movff	dtoa@d+4,dtoa@n+4
  1025  000832  C029  F041         	movff	dtoa@d+5,dtoa@n+5
  1026  000836  C02A  F042         	movff	dtoa@d+6,dtoa@n+6
  1027  00083A  C02B  F043         	movff	dtoa@d+7,dtoa@n+7
  1028  00083E                     
  1029                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
  1030  00083E  BE43               	btfsc	(dtoa@n+7)^0,7,c
  1031  000840  EF24  F004         	goto	u751
  1032  000844  EF27  F004         	goto	u750
  1033  000848                     u751:
  1034  000848  0E01               	movlw	1
  1035  00084A  EF28  F004         	goto	u760
  1036  00084E                     u750:
  1037  00084E  0E00               	movlw	0
  1038  000850                     u760:
  1039  000850  6E3A               	movwf	dtoa@s^0,c
  1040  000852  6A3B               	clrf	(dtoa@s+1)^0,c
  1041                           
  1042                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
  1043  000854  503A               	movf	dtoa@s^0,w,c
  1044  000856  103B               	iorwf	(dtoa@s+1)^0,w,c
  1045  000858  B4D8               	btfsc	status,2,c
  1046  00085A  EF31  F004         	goto	u771
  1047  00085E  EF33  F004         	goto	u770
  1048  000862                     u771:
  1049  000862  EF43  F004         	goto	l1375
  1050  000866                     u770:
  1051  000866                     
  1052                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
  1053  000866  1E43               	comf	(dtoa@n+7)^0,f,c
  1054  000868  1E42               	comf	(dtoa@n+6)^0,f,c
  1055  00086A  1E41               	comf	(dtoa@n+5)^0,f,c
  1056  00086C  1E40               	comf	(dtoa@n+4)^0,f,c
  1057  00086E  1E3F               	comf	(dtoa@n+3)^0,f,c
  1058  000870  1E3E               	comf	(dtoa@n+2)^0,f,c
  1059  000872  1E3D               	comf	(dtoa@n+1)^0,f,c
  1060  000874  6C3C               	negf	dtoa@n^0,c
  1061  000876  0E00               	movlw	0
  1062  000878  223D               	addwfc	(dtoa@n+1)^0,f,c
  1063  00087A  223E               	addwfc	(dtoa@n+2)^0,f,c
  1064  00087C  223F               	addwfc	(dtoa@n+3)^0,f,c
  1065  00087E  2240               	addwfc	(dtoa@n+4)^0,f,c
  1066  000880  2241               	addwfc	(dtoa@n+5)^0,f,c
  1067  000882  2242               	addwfc	(dtoa@n+6)^0,f,c
  1068  000884  2243               	addwfc	(dtoa@n+7)^0,f,c
  1069  000886                     l1375:
  1070                           
  1071                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
  1072  000886  0100               	movlb	0	; () banked
  1073  000888  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1074  00088A  EF49  F004         	goto	u781
  1075  00088E  EF4B  F004         	goto	u780
  1076  000892                     u781:
  1077  000892  EF4C  F004         	goto	l1379
  1078  000896                     u780:
  1079  000896                     
  1080                           ; BSR set to: 0
  1081                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
  1082  000896  9366               	bcf	_flags& (0+255),1,b
  1083  000898                     l1379:
  1084                           
  1085                           ; BSR set to: 0
  1086                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
  1087  000898  BF65               	btfsc	(_prec+1)& (0+255),7,b
  1088  00089A  EF59  F004         	goto	u790
  1089  00089E  5165               	movf	(_prec+1)& (0+255),w,b
  1090  0008A0  E106               	bnz	u791
  1091  0008A2  0564               	decf	_prec& (0+255),w,b
  1092  0008A4  B0D8               	btfsc	status,0,c
  1093  0008A6  EF57  F004         	goto	u791
  1094  0008AA  EF59  F004         	goto	u790
  1095  0008AE                     u791:
  1096  0008AE  EF5F  F004         	goto	l107
  1097  0008B2                     u790:
  1098  0008B2                     
  1099                           ; BSR set to: 0
  1100  0008B2  0E00               	movlw	0
  1101  0008B4  6E37               	movwf	(dtoa@p+1)^0,c
  1102  0008B6  0E01               	movlw	1
  1103  0008B8  6E36               	movwf	dtoa@p^0,c
  1104  0008BA  EF63  F004         	goto	l109
  1105  0008BE                     l107:
  1106                           
  1107                           ; BSR set to: 0
  1108  0008BE  C064  F036         	movff	_prec,dtoa@p
  1109  0008C2  C065  F037         	movff	_prec+1,dtoa@p+1
  1110  0008C6                     l109:
  1111                           
  1112                           ; BSR set to: 0
  1113                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
  1114  0008C6  C062  F038         	movff	_width,dtoa@w
  1115  0008CA  C063  F039         	movff	_width+1,dtoa@w+1
  1116  0008CE                     
  1117                           ; BSR set to: 0
  1118                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
  1119  0008CE  503A               	movf	dtoa@s^0,w,c
  1120  0008D0  103B               	iorwf	(dtoa@s+1)^0,w,c
  1121  0008D2  A4D8               	btfss	status,2,c
  1122  0008D4  EF6E  F004         	goto	u801
  1123  0008D8  EF70  F004         	goto	u800
  1124  0008DC                     u801:
  1125  0008DC  EF77  F004         	goto	l1387
  1126  0008E0                     u800:
  1127  0008E0                     
  1128                           ; BSR set to: 0
  1129  0008E0  A566               	btfss	_flags& (0+255),2,b
  1130  0008E2  EF75  F004         	goto	u811
  1131  0008E6  EF77  F004         	goto	u810
  1132  0008EA                     u811:
  1133  0008EA  EF7A  F004         	goto	l1389
  1134  0008EE                     u810:
  1135  0008EE                     l1387:
  1136                           
  1137                           ; BSR set to: 0
  1138                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
  1139  0008EE  0638               	decf	dtoa@w^0,f,c
  1140  0008F0  A0D8               	btfss	status,0,c
  1141  0008F2  0639               	decf	(dtoa@w+1)^0,f,c
  1142  0008F4                     l1389:
  1143                           
  1144                           ; BSR set to: 0
  1145                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
  1146  0008F4  0E00               	movlw	0
  1147  0008F6  6E45               	movwf	(dtoa@i+1)^0,c
  1148  0008F8  0E1F               	movlw	31
  1149  0008FA  6E44               	movwf	dtoa@i^0,c
  1150  0008FC                     
  1151                           ; BSR set to: 0
  1152                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
  1153  0008FC  0E00               	movlw	0
  1154  0008FE  6F88               	movwf	(_dbuf+31)& (0+255),b
  1155                           
  1156                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1157  000900  EFFE  F004         	goto	l1403
  1158  000904                     l1393:
  1159                           
  1160                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
  1161  000904  0644               	decf	dtoa@i^0,f,c
  1162  000906  A0D8               	btfss	status,0,c
  1163  000908  0645               	decf	(dtoa@i+1)^0,f,c
  1164  00090A                     
  1165                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
  1166  00090A  0E69               	movlw	low _dbuf
  1167  00090C  2444               	addwf	dtoa@i^0,w,c
  1168  00090E  6ED9               	movwf	fsr2l,c
  1169  000910  0E00               	movlw	high _dbuf
  1170  000912  2045               	addwfc	(dtoa@i+1)^0,w,c
  1171  000914  6EDA               	movwf	fsr2h,c
  1172  000916  C03C  F001         	movff	dtoa@n,___aomod@dividend
  1173  00091A  C03D  F002         	movff	dtoa@n+1,___aomod@dividend+1
  1174  00091E  C03E  F003         	movff	dtoa@n+2,___aomod@dividend+2
  1175  000922  C03F  F004         	movff	dtoa@n+3,___aomod@dividend+3
  1176  000926  C040  F005         	movff	dtoa@n+4,___aomod@dividend+4
  1177  00092A  C041  F006         	movff	dtoa@n+5,___aomod@dividend+5
  1178  00092E  C042  F007         	movff	dtoa@n+6,___aomod@dividend+6
  1179  000932  C043  F008         	movff	dtoa@n+7,___aomod@dividend+7
  1180  000936  0E0A               	movlw	10
  1181  000938  6E09               	movwf	___aomod@divisor^0,c
  1182  00093A  0E00               	movlw	0
  1183  00093C  6E0A               	movwf	(___aomod@divisor+1)^0,c
  1184  00093E  0E00               	movlw	0
  1185  000940  6E0B               	movwf	(___aomod@divisor+2)^0,c
  1186  000942  0E00               	movlw	0
  1187  000944  6E0C               	movwf	(___aomod@divisor+3)^0,c
  1188  000946  0E00               	movlw	0
  1189  000948  6E0D               	movwf	(___aomod@divisor+4)^0,c
  1190  00094A  0E00               	movlw	0
  1191  00094C  6E0E               	movwf	(___aomod@divisor+5)^0,c
  1192  00094E  0E00               	movlw	0
  1193  000950  6E0F               	movwf	(___aomod@divisor+6)^0,c
  1194  000952  0E00               	movlw	0
  1195  000954  6E10               	movwf	(___aomod@divisor+7)^0,c
  1196  000956  EC1E  F007         	call	___aomod	;wreg free
  1197  00095A  C001  F02C         	movff	?___aomod,??_dtoa
  1198  00095E  C002  F02D         	movff	?___aomod+1,??_dtoa+1
  1199  000962  C003  F02E         	movff	?___aomod+2,??_dtoa+2
  1200  000966  C004  F02F         	movff	?___aomod+3,??_dtoa+3
  1201  00096A  C005  F030         	movff	?___aomod+4,??_dtoa+4
  1202  00096E  C006  F031         	movff	?___aomod+5,??_dtoa+5
  1203  000972  C007  F032         	movff	?___aomod+6,??_dtoa+6
  1204  000976  C008  F033         	movff	?___aomod+7,??_dtoa+7
  1205  00097A  C02C  F013         	movff	??_dtoa,abs@a
  1206  00097E  C02E  F014         	movff	??_dtoa+2,abs@a+1
  1207  000982  ECAE  F009         	call	_abs	;wreg free
  1208  000986  5013               	movf	?_abs^0,w,c
  1209  000988  0F30               	addlw	48
  1210  00098A  6EDF               	movwf	indf2,c
  1211  00098C                     
  1212                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
  1213  00098C  0636               	decf	dtoa@p^0,f,c
  1214  00098E  A0D8               	btfss	status,0,c
  1215  000990  0637               	decf	(dtoa@p+1)^0,f,c
  1216  000992                     
  1217                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
  1218  000992  0638               	decf	dtoa@w^0,f,c
  1219  000994  A0D8               	btfss	status,0,c
  1220  000996  0639               	decf	(dtoa@w+1)^0,f,c
  1221  000998                     
  1222                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
  1223  000998  C03C  F001         	movff	dtoa@n,___aodiv@dividend
  1224  00099C  C03D  F002         	movff	dtoa@n+1,___aodiv@dividend+1
  1225  0009A0  C03E  F003         	movff	dtoa@n+2,___aodiv@dividend+2
  1226  0009A4  C03F  F004         	movff	dtoa@n+3,___aodiv@dividend+3
  1227  0009A8  C040  F005         	movff	dtoa@n+4,___aodiv@dividend+4
  1228  0009AC  C041  F006         	movff	dtoa@n+5,___aodiv@dividend+5
  1229  0009B0  C042  F007         	movff	dtoa@n+6,___aodiv@dividend+6
  1230  0009B4  C043  F008         	movff	dtoa@n+7,___aodiv@dividend+7
  1231  0009B8  0E0A               	movlw	10
  1232  0009BA  6E09               	movwf	___aodiv@divisor^0,c
  1233  0009BC  0E00               	movlw	0
  1234  0009BE  6E0A               	movwf	(___aodiv@divisor+1)^0,c
  1235  0009C0  0E00               	movlw	0
  1236  0009C2  6E0B               	movwf	(___aodiv@divisor+2)^0,c
  1237  0009C4  0E00               	movlw	0
  1238  0009C6  6E0C               	movwf	(___aodiv@divisor+3)^0,c
  1239  0009C8  0E00               	movlw	0
  1240  0009CA  6E0D               	movwf	(___aodiv@divisor+4)^0,c
  1241  0009CC  0E00               	movlw	0
  1242  0009CE  6E0E               	movwf	(___aodiv@divisor+5)^0,c
  1243  0009D0  0E00               	movlw	0
  1244  0009D2  6E0F               	movwf	(___aodiv@divisor+6)^0,c
  1245  0009D4  0E00               	movlw	0
  1246  0009D6  6E10               	movwf	(___aodiv@divisor+7)^0,c
  1247  0009D8  EC5A  F006         	call	___aodiv	;wreg free
  1248  0009DC  C001  F03C         	movff	?___aodiv,dtoa@n
  1249  0009E0  C002  F03D         	movff	?___aodiv+1,dtoa@n+1
  1250  0009E4  C003  F03E         	movff	?___aodiv+2,dtoa@n+2
  1251  0009E8  C004  F03F         	movff	?___aodiv+3,dtoa@n+3
  1252  0009EC  C005  F040         	movff	?___aodiv+4,dtoa@n+4
  1253  0009F0  C006  F041         	movff	?___aodiv+5,dtoa@n+5
  1254  0009F4  C007  F042         	movff	?___aodiv+6,dtoa@n+6
  1255  0009F8  C008  F043         	movff	?___aodiv+7,dtoa@n+7
  1256  0009FC                     l1403:
  1257                           
  1258                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1259  0009FC  BE45               	btfsc	(dtoa@i+1)^0,7,c
  1260  0009FE  EF09  F005         	goto	u821
  1261  000A02  5045               	movf	(dtoa@i+1)^0,w,c
  1262  000A04  E108               	bnz	u820
  1263  000A06  0444               	decf	dtoa@i^0,w,c
  1264  000A08  A0D8               	btfss	status,0,c
  1265  000A0A  EF09  F005         	goto	u821
  1266  000A0E  EF0B  F005         	goto	u820
  1267  000A12                     u821:
  1268  000A12  EF3C  F005         	goto	l1413
  1269  000A16                     u820:
  1270  000A16  503C               	movf	dtoa@n^0,w,c
  1271  000A18  103D               	iorwf	(dtoa@n+1)^0,w,c
  1272  000A1A  103E               	iorwf	(dtoa@n+2)^0,w,c
  1273  000A1C  103F               	iorwf	(dtoa@n+3)^0,w,c
  1274  000A1E  1040               	iorwf	(dtoa@n+4)^0,w,c
  1275  000A20  1041               	iorwf	(dtoa@n+5)^0,w,c
  1276  000A22  1042               	iorwf	(dtoa@n+6)^0,w,c
  1277  000A24  1043               	iorwf	(dtoa@n+7)^0,w,c
  1278  000A26  A4D8               	btfss	status,2,c
  1279  000A28  EF18  F005         	goto	u831
  1280  000A2C  EF1A  F005         	goto	u830
  1281  000A30                     u831:
  1282  000A30  EF82  F004         	goto	l1393
  1283  000A34                     u830:
  1284  000A34  BE37               	btfsc	(dtoa@p+1)^0,7,c
  1285  000A36  EF27  F005         	goto	u840
  1286  000A3A  5037               	movf	(dtoa@p+1)^0,w,c
  1287  000A3C  E106               	bnz	u841
  1288  000A3E  0436               	decf	dtoa@p^0,w,c
  1289  000A40  B0D8               	btfsc	status,0,c
  1290  000A42  EF25  F005         	goto	u841
  1291  000A46  EF27  F005         	goto	u840
  1292  000A4A                     u841:
  1293  000A4A  EF82  F004         	goto	l1393
  1294  000A4E                     u840:
  1295  000A4E  BE39               	btfsc	(dtoa@w+1)^0,7,c
  1296  000A50  EF32  F005         	goto	u851
  1297  000A54  5039               	movf	(dtoa@w+1)^0,w,c
  1298  000A56  E108               	bnz	u850
  1299  000A58  0438               	decf	dtoa@w^0,w,c
  1300  000A5A  A0D8               	btfss	status,0,c
  1301  000A5C  EF32  F005         	goto	u851
  1302  000A60  EF34  F005         	goto	u850
  1303  000A64                     u851:
  1304  000A64  EF3C  F005         	goto	l1413
  1305  000A68                     u850:
  1306  000A68  0100               	movlb	0	; () banked
  1307  000A6A  B366               	btfsc	_flags& (0+255),1,b
  1308  000A6C  EF3A  F005         	goto	u861
  1309  000A70  EF3C  F005         	goto	u860
  1310  000A74                     u861:
  1311  000A74  EF82  F004         	goto	l1393
  1312  000A78                     u860:
  1313  000A78                     l1413:
  1314                           
  1315                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
  1316  000A78  503A               	movf	dtoa@s^0,w,c
  1317  000A7A  103B               	iorwf	(dtoa@s+1)^0,w,c
  1318  000A7C  A4D8               	btfss	status,2,c
  1319  000A7E  EF43  F005         	goto	u871
  1320  000A82  EF45  F005         	goto	u870
  1321  000A86                     u871:
  1322  000A86  EF4D  F005         	goto	l1417
  1323  000A8A                     u870:
  1324  000A8A  0100               	movlb	0	; () banked
  1325  000A8C  A566               	btfss	_flags& (0+255),2,b
  1326  000A8E  EF4B  F005         	goto	u881
  1327  000A92  EF4D  F005         	goto	u880
  1328  000A96                     u881:
  1329  000A96  EF6B  F005         	goto	l1427
  1330  000A9A                     u880:
  1331  000A9A                     l1417:
  1332                           
  1333                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
  1334  000A9A  0644               	decf	dtoa@i^0,f,c
  1335  000A9C  A0D8               	btfss	status,0,c
  1336  000A9E  0645               	decf	(dtoa@i+1)^0,f,c
  1337  000AA0                     
  1338                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
  1339  000AA0  503A               	movf	dtoa@s^0,w,c
  1340  000AA2  103B               	iorwf	(dtoa@s+1)^0,w,c
  1341  000AA4  A4D8               	btfss	status,2,c
  1342  000AA6  EF57  F005         	goto	u891
  1343  000AAA  EF59  F005         	goto	u890
  1344  000AAE                     u891:
  1345  000AAE  EF5F  F005         	goto	l1423
  1346  000AB2                     u890:
  1347  000AB2  0E00               	movlw	0
  1348  000AB4  6E35               	movwf	(_dtoa$354+1)^0,c
  1349  000AB6  0E2B               	movlw	43
  1350  000AB8  6E34               	movwf	_dtoa$354^0,c
  1351  000ABA  EF63  F005         	goto	l1425
  1352  000ABE                     l1423:
  1353  000ABE  0E00               	movlw	0
  1354  000AC0  6E35               	movwf	(_dtoa$354+1)^0,c
  1355  000AC2  0E2D               	movlw	45
  1356  000AC4  6E34               	movwf	_dtoa$354^0,c
  1357  000AC6                     l1425:
  1358  000AC6  0E69               	movlw	low _dbuf
  1359  000AC8  2444               	addwf	dtoa@i^0,w,c
  1360  000ACA  6ED9               	movwf	fsr2l,c
  1361  000ACC  0E00               	movlw	high _dbuf
  1362  000ACE  2045               	addwfc	(dtoa@i+1)^0,w,c
  1363  000AD0  6EDA               	movwf	fsr2h,c
  1364  000AD2  C034  FFDF         	movff	_dtoa$354,indf2
  1365  000AD6                     l1427:
  1366                           
  1367                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
  1368  000AD6  C022  F017         	movff	dtoa@fp,pad@fp
  1369  000ADA  C023  F018         	movff	dtoa@fp+1,pad@fp+1
  1370  000ADE  0E69               	movlw	low _dbuf
  1371  000AE0  2444               	addwf	dtoa@i^0,w,c
  1372  000AE2  6E19               	movwf	pad@buf^0,c
  1373  000AE4  0E00               	movlw	high _dbuf
  1374  000AE6  2045               	addwfc	(dtoa@i+1)^0,w,c
  1375  000AE8  6E1A               	movwf	(pad@buf+1)^0,c
  1376  000AEA  C038  F01B         	movff	dtoa@w,pad@p
  1377  000AEE  C039  F01C         	movff	dtoa@w+1,pad@p+1
  1378  000AF2  ECD0  F007         	call	_pad	;wreg free
  1379  000AF6  C017  F022         	movff	?_pad,?_dtoa
  1380  000AFA  C018  F023         	movff	?_pad+1,?_dtoa+1
  1381  000AFE  0012               	return		;funcret
  1382  000B00                     __end_of_dtoa:
  1383                           	opt callstack 0
  1384                           
  1385 ;; *************** function _pad *****************
  1386 ;; Defined at:
  1387 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  1388 ;; Parameters:    Size  Location     Type
  1389 ;;  fp              2   22[COMRAM] PTR struct _IO_FILE
  1390 ;;		 -> NULL(0), 
  1391 ;;  buf             2   24[COMRAM] PTR unsigned char 
  1392 ;;		 -> dbuf(32), 
  1393 ;;  p               2   26[COMRAM] int 
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;  w               2   31[COMRAM] int 
  1396 ;;  i               2   29[COMRAM] int 
  1397 ;; Return value:  Size  Location     Type
  1398 ;;                  2   22[COMRAM] int 
  1399 ;; Registers used:
  1400 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1401 ;; Tracked objects:
  1402 ;;		On entry : 0/0
  1403 ;;		On exit  : 0/0
  1404 ;;		Unchanged: 0/0
  1405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1406 ;;      Params:         6       0       0       0       0       0       0       0       0
  1407 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1408 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1409 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1410 ;;Total ram usage:       11 bytes
  1411 ;; Hardware stack levels used:    1
  1412 ;; Hardware stack levels required when called:    7
  1413 ;; This function calls:
  1414 ;;		_fputc
  1415 ;;		_fputs
  1416 ;;		_strlen
  1417 ;; This function is called by:
  1418 ;;		_dtoa
  1419 ;; This function uses a non-reentrant model
  1420 ;;
  1421                           
  1422                           	psect	text5
  1423  000FA0                     __ptext5:
  1424                           	opt callstack 0
  1425  000FA0                     _pad:
  1426                           	opt callstack 19
  1427  000FA0                     
  1428                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
  1429  000FA0  0100               	movlb	0	; () banked
  1430  000FA2  A166               	btfss	_flags& (0+255),0,b
  1431  000FA4  EFD6  F007         	goto	u571
  1432  000FA8  EFD8  F007         	goto	u570
  1433  000FAC                     u571:
  1434  000FAC  EFE2  F007         	goto	l1267
  1435  000FB0                     u570:
  1436  000FB0                     
  1437                           ; BSR set to: 0
  1438                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
  1439  000FB0  C019  F010         	movff	pad@buf,fputs@s
  1440  000FB4  C01A  F011         	movff	pad@buf+1,fputs@s+1
  1441  000FB8  C017  F012         	movff	pad@fp,fputs@fp
  1442  000FBC  C018  F013         	movff	pad@fp+1,fputs@fp+1
  1443  000FC0  EC6B  F009         	call	_fputs	;wreg free
  1444  000FC4                     l1267:
  1445                           
  1446                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
  1447  000FC4  BE1C               	btfsc	(pad@p+1)^0,7,c
  1448  000FC6  EFE7  F007         	goto	u581
  1449  000FCA  EFE9  F007         	goto	u580
  1450  000FCE                     u581:
  1451  000FCE  EFEF  F007         	goto	l1271
  1452  000FD2                     u580:
  1453  000FD2  C01B  F020         	movff	pad@p,pad@w
  1454  000FD6  C01C  F021         	movff	pad@p+1,pad@w+1
  1455  000FDA  EFF3  F007         	goto	l96
  1456  000FDE                     l1271:
  1457  000FDE  0E00               	movlw	0
  1458  000FE0  6E21               	movwf	(pad@w+1)^0,c
  1459  000FE2  0E00               	movlw	0
  1460  000FE4  6E20               	movwf	pad@w^0,c
  1461  000FE6                     l96:
  1462                           
  1463                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
  1464  000FE6  0E00               	movlw	0
  1465  000FE8  6E1F               	movwf	(pad@i+1)^0,c
  1466  000FEA  0E00               	movlw	0
  1467  000FEC  6E1E               	movwf	pad@i^0,c
  1468                           
  1469                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1470  000FEE  EF05  F008         	goto	l1277
  1471  000FF2                     l1273:
  1472                           
  1473                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
  1474  000FF2  0E00               	movlw	0
  1475  000FF4  6E08               	movwf	(fputc@c+1)^0,c
  1476  000FF6  0E20               	movlw	32
  1477  000FF8  6E07               	movwf	fputc@c^0,c
  1478  000FFA  C017  F009         	movff	pad@fp,fputc@fp
  1479  000FFE  C018  F00A         	movff	pad@fp+1,fputc@fp+1
  1480  001002  EC33  F008         	call	_fputc	;wreg free
  1481  001006                     
  1482                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
  1483  001006  4A1E               	infsnz	pad@i^0,f,c
  1484  001008  2A1F               	incf	(pad@i+1)^0,f,c
  1485  00100A                     l1277:
  1486                           
  1487                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
  1488  00100A  5020               	movf	pad@w^0,w,c
  1489  00100C  5C1E               	subwf	pad@i^0,w,c
  1490  00100E  501F               	movf	(pad@i+1)^0,w,c
  1491  001010  0A80               	xorlw	128
  1492  001012  6E1D               	movwf	??_pad^0,c
  1493  001014  5021               	movf	(pad@w+1)^0,w,c
  1494  001016  0A80               	xorlw	128
  1495  001018  581D               	subwfb	??_pad^0,w,c
  1496  00101A  A0D8               	btfss	status,0,c
  1497  00101C  EF12  F008         	goto	u591
  1498  001020  EF14  F008         	goto	u590
  1499  001024                     u591:
  1500  001024  EFF9  F007         	goto	l1273
  1501  001028                     u590:
  1502  001028                     
  1503                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
  1504  001028  0100               	movlb	0	; () banked
  1505  00102A  B166               	btfsc	_flags& (0+255),0,b
  1506  00102C  EF1A  F008         	goto	u601
  1507  001030  EF1C  F008         	goto	u600
  1508  001034                     u601:
  1509  001034  EF26  F008         	goto	l1281
  1510  001038                     u600:
  1511  001038                     
  1512                           ; BSR set to: 0
  1513                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
  1514  001038  C019  F010         	movff	pad@buf,fputs@s
  1515  00103C  C01A  F011         	movff	pad@buf+1,fputs@s+1
  1516  001040  C017  F012         	movff	pad@fp,fputs@fp
  1517  001044  C018  F013         	movff	pad@fp+1,fputs@fp+1
  1518  001048  EC6B  F009         	call	_fputs	;wreg free
  1519  00104C                     l1281:
  1520                           
  1521                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
  1522  00104C  C019  F001         	movff	pad@buf,strlen@s
  1523  001050  C01A  F002         	movff	pad@buf+1,strlen@s+1
  1524  001054  ECCE  F009         	call	_strlen	;wreg free
  1525  001058  5020               	movf	pad@w^0,w,c
  1526  00105A  2401               	addwf	?_strlen^0,w,c
  1527  00105C  6E17               	movwf	?_pad^0,c
  1528  00105E  5021               	movf	(pad@w+1)^0,w,c
  1529  001060  2002               	addwfc	(?_strlen+1)^0,w,c
  1530  001062  6E18               	movwf	(?_pad+1)^0,c
  1531  001064  0012               	return		;funcret
  1532  001066                     __end_of_pad:
  1533                           	opt callstack 0
  1534                           
  1535 ;; *************** function _strlen *****************
  1536 ;; Defined at:
  1537 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strlen.c"
  1538 ;; Parameters:    Size  Location     Type
  1539 ;;  s               2    0[COMRAM] PTR const unsigned char 
  1540 ;;		 -> dbuf(32), 
  1541 ;; Auto vars:     Size  Location     Type
  1542 ;;  a               2    2[COMRAM] PTR const unsigned char 
  1543 ;;		 -> dbuf(32), 
  1544 ;; Return value:  Size  Location     Type
  1545 ;;                  2    0[COMRAM] unsigned int 
  1546 ;; Registers used:
  1547 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1548 ;; Tracked objects:
  1549 ;;		On entry : 0/0
  1550 ;;		On exit  : 0/0
  1551 ;;		Unchanged: 0/0
  1552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1553 ;;      Params:         2       0       0       0       0       0       0       0       0
  1554 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1555 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1556 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1557 ;;Total ram usage:        4 bytes
  1558 ;; Hardware stack levels used:    1
  1559 ;; Hardware stack levels required when called:    1
  1560 ;; This function calls:
  1561 ;;		Nothing
  1562 ;; This function is called by:
  1563 ;;		_pad
  1564 ;; This function uses a non-reentrant model
  1565 ;;
  1566                           
  1567                           	psect	text6
  1568  00139C                     __ptext6:
  1569                           	opt callstack 0
  1570  00139C                     _strlen:
  1571                           	opt callstack 24
  1572  00139C  C001  F003         	movff	strlen@s,strlen@a
  1573  0013A0  C002  F004         	movff	strlen@s+1,strlen@a+1
  1574  0013A4  EFD6  F009         	goto	l1257
  1575  0013A8                     l1255:
  1576  0013A8  4A01               	infsnz	strlen@s^0,f,c
  1577  0013AA  2A02               	incf	(strlen@s+1)^0,f,c
  1578  0013AC                     l1257:
  1579  0013AC  C001  FFD9         	movff	strlen@s,fsr2l
  1580  0013B0  C002  FFDA         	movff	strlen@s+1,fsr2h
  1581  0013B4  50DF               	movf	indf2,w,c
  1582  0013B6  A4D8               	btfss	status,2,c
  1583  0013B8  EFE0  F009         	goto	u561
  1584  0013BC  EFE2  F009         	goto	u560
  1585  0013C0                     u561:
  1586  0013C0  EFD4  F009         	goto	l1255
  1587  0013C4                     u560:
  1588  0013C4  5003               	movf	strlen@a^0,w,c
  1589  0013C6  5C01               	subwf	strlen@s^0,w,c
  1590  0013C8  6E01               	movwf	?_strlen^0,c
  1591  0013CA  5004               	movf	(strlen@a+1)^0,w,c
  1592  0013CC  5802               	subwfb	(strlen@s+1)^0,w,c
  1593  0013CE  6E02               	movwf	(?_strlen+1)^0,c
  1594  0013D0  0012               	return		;funcret
  1595  0013D2                     __end_of_strlen:
  1596                           	opt callstack 0
  1597                           
  1598 ;; *************** function _fputs *****************
  1599 ;; Defined at:
  1600 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputs.c"
  1601 ;; Parameters:    Size  Location     Type
  1602 ;;  s               2   15[COMRAM] PTR const unsigned char 
  1603 ;;		 -> dbuf(32), 
  1604 ;;  fp              2   17[COMRAM] PTR struct _IO_FILE
  1605 ;;		 -> NULL(0), 
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;  i               2   20[COMRAM] int 
  1608 ;;  c               1   19[COMRAM] unsigned char 
  1609 ;; Return value:  Size  Location     Type
  1610 ;;                  2   15[COMRAM] int 
  1611 ;; Registers used:
  1612 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1613 ;; Tracked objects:
  1614 ;;		On entry : 0/0
  1615 ;;		On exit  : 0/0
  1616 ;;		Unchanged: 0/0
  1617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1618 ;;      Params:         4       0       0       0       0       0       0       0       0
  1619 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1620 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1621 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1622 ;;Total ram usage:        7 bytes
  1623 ;; Hardware stack levels used:    1
  1624 ;; Hardware stack levels required when called:    6
  1625 ;; This function calls:
  1626 ;;		_fputc
  1627 ;; This function is called by:
  1628 ;;		_pad
  1629 ;; This function uses a non-reentrant model
  1630 ;;
  1631                           
  1632                           	psect	text7
  1633  0012D6                     __ptext7:
  1634                           	opt callstack 0
  1635  0012D6                     _fputs:
  1636                           	opt callstack 19
  1637  0012D6  0E00               	movlw	0
  1638  0012D8  6E16               	movwf	(fputs@i+1)^0,c
  1639  0012DA  0E00               	movlw	0
  1640  0012DC  6E15               	movwf	fputs@i^0,c
  1641  0012DE  EF7C  F009         	goto	l1251
  1642  0012E2                     l1247:
  1643  0012E2  C014  F007         	movff	fputs@c,fputc@c
  1644  0012E6  6A08               	clrf	(fputc@c+1)^0,c
  1645  0012E8  C012  F009         	movff	fputs@fp,fputc@fp
  1646  0012EC  C013  F00A         	movff	fputs@fp+1,fputc@fp+1
  1647  0012F0  EC33  F008         	call	_fputc	;wreg free
  1648  0012F4  4A15               	infsnz	fputs@i^0,f,c
  1649  0012F6  2A16               	incf	(fputs@i+1)^0,f,c
  1650  0012F8                     l1251:
  1651  0012F8  5015               	movf	fputs@i^0,w,c
  1652  0012FA  2410               	addwf	fputs@s^0,w,c
  1653  0012FC  6ED9               	movwf	fsr2l,c
  1654  0012FE  5016               	movf	(fputs@i+1)^0,w,c
  1655  001300  2011               	addwfc	(fputs@s+1)^0,w,c
  1656  001302  6EDA               	movwf	fsr2h,c
  1657  001304  50DF               	movf	indf2,w,c
  1658  001306  6E14               	movwf	fputs@c^0,c
  1659  001308  5014               	movf	fputs@c^0,w,c
  1660  00130A  A4D8               	btfss	status,2,c
  1661  00130C  EF8A  F009         	goto	u551
  1662  001310  EF8C  F009         	goto	u550
  1663  001314                     u551:
  1664  001314  EF71  F009         	goto	l1247
  1665  001318                     u550:
  1666  001318  0012               	return		;funcret
  1667  00131A                     __end_of_fputs:
  1668                           	opt callstack 0
  1669                           
  1670 ;; *************** function _fputc *****************
  1671 ;; Defined at:
  1672 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputc.c"
  1673 ;; Parameters:    Size  Location     Type
  1674 ;;  c               2    6[COMRAM] int 
  1675 ;;  fp              2    8[COMRAM] PTR struct _IO_FILE
  1676 ;;		 -> NULL(0), 
  1677 ;; Auto vars:     Size  Location     Type
  1678 ;;		None
  1679 ;; Return value:  Size  Location     Type
  1680 ;;                  2    6[COMRAM] int 
  1681 ;; Registers used:
  1682 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1683 ;; Tracked objects:
  1684 ;;		On entry : 0/0
  1685 ;;		On exit  : 0/0
  1686 ;;		Unchanged: 0/0
  1687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1688 ;;      Params:         4       0       0       0       0       0       0       0       0
  1689 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1690 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1691 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1692 ;;Total ram usage:        9 bytes
  1693 ;; Hardware stack levels used:    1
  1694 ;; Hardware stack levels required when called:    5
  1695 ;; This function calls:
  1696 ;;		_putch
  1697 ;; This function is called by:
  1698 ;;		_pad
  1699 ;;		_vfpfcnvrt
  1700 ;;		_fputs
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           	psect	text8
  1705  001066                     __ptext8:
  1706                           	opt callstack 0
  1707  001066                     _fputc:
  1708                           	opt callstack 22
  1709  001066  5009               	movf	fputc@fp^0,w,c
  1710  001068  100A               	iorwf	(fputc@fp+1)^0,w,c
  1711  00106A  B4D8               	btfsc	status,2,c
  1712  00106C  EF3A  F008         	goto	u511
  1713  001070  EF3C  F008         	goto	u510
  1714  001074                     u511:
  1715  001074  EF45  F008         	goto	l1235
  1716  001078                     u510:
  1717  001078  5009               	movf	fputc@fp^0,w,c
  1718  00107A  100A               	iorwf	(fputc@fp+1)^0,w,c
  1719  00107C  A4D8               	btfss	status,2,c
  1720  00107E  EF43  F008         	goto	u521
  1721  001082  EF45  F008         	goto	u520
  1722  001086                     u521:
  1723  001086  EF4A  F008         	goto	l1237
  1724  00108A                     u520:
  1725  00108A                     l1235:
  1726  00108A  5007               	movf	fputc@c^0,w,c
  1727  00108C  EC3F  F00A         	call	_putch
  1728  001090  EF7D  F008         	goto	l834
  1729  001094                     l1237:
  1730  001094  EE20 F004          	lfsr	2,4
  1731  001098  5009               	movf	fputc@fp^0,w,c
  1732  00109A  26D9               	addwf	fsr2l,f,c
  1733  00109C  500A               	movf	(fputc@fp+1)^0,w,c
  1734  00109E  22DA               	addwfc	fsr2h,f,c
  1735  0010A0  50DE               	movf	postinc2,w,c
  1736  0010A2  10DE               	iorwf	postinc2,w,c
  1737  0010A4  B4D8               	btfsc	status,2,c
  1738  0010A6  EF57  F008         	goto	u531
  1739  0010AA  EF59  F008         	goto	u530
  1740  0010AE                     u531:
  1741  0010AE  EF74  F008         	goto	l1241
  1742  0010B2                     u530:
  1743  0010B2  EE20 F004          	lfsr	2,4
  1744  0010B6  5009               	movf	fputc@fp^0,w,c
  1745  0010B8  26D9               	addwf	fsr2l,f,c
  1746  0010BA  500A               	movf	(fputc@fp+1)^0,w,c
  1747  0010BC  22DA               	addwfc	fsr2h,f,c
  1748  0010BE  EE10 F002          	lfsr	1,2
  1749  0010C2  5009               	movf	fputc@fp^0,w,c
  1750  0010C4  26E1               	addwf	fsr1l,f,c
  1751  0010C6  500A               	movf	(fputc@fp+1)^0,w,c
  1752  0010C8  22E2               	addwfc	fsr1h,f,c
  1753  0010CA  50DE               	movf	postinc2,w,c
  1754  0010CC  5CE6               	subwf	postinc1,w,c
  1755  0010CE  50E6               	movf	postinc1,w,c
  1756  0010D0  0A80               	xorlw	128
  1757  0010D2  6E0F               	movwf	(??_fputc+4)^0,c
  1758  0010D4  50DE               	movf	postinc2,w,c
  1759  0010D6  0A80               	xorlw	128
  1760  0010D8  580F               	subwfb	(??_fputc+4)^0,w,c
  1761  0010DA  B0D8               	btfsc	status,0,c
  1762  0010DC  EF72  F008         	goto	u541
  1763  0010E0  EF74  F008         	goto	u540
  1764  0010E4                     u541:
  1765  0010E4  EF7D  F008         	goto	l834
  1766  0010E8                     u540:
  1767  0010E8                     l1241:
  1768  0010E8  EE20 F002          	lfsr	2,2
  1769  0010EC  5009               	movf	fputc@fp^0,w,c
  1770  0010EE  26D9               	addwf	fsr2l,f,c
  1771  0010F0  500A               	movf	(fputc@fp+1)^0,w,c
  1772  0010F2  22DA               	addwfc	fsr2h,f,c
  1773  0010F4  2ADE               	incf	postinc2,f,c
  1774  0010F6  0E00               	movlw	0
  1775  0010F8  22DD               	addwfc	postdec2,f,c
  1776  0010FA                     l834:
  1777  0010FA  0012               	return		;funcret
  1778  0010FC                     __end_of_fputc:
  1779                           	opt callstack 0
  1780                           
  1781 ;; *************** function _putch *****************
  1782 ;; Defined at:
  1783 ;;		line 26 in file "LarguraDePulsoMain.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;  data            1    wreg     unsigned char 
  1786 ;; Auto vars:     Size  Location     Type
  1787 ;;  data            1    5[COMRAM] unsigned char 
  1788 ;; Return value:  Size  Location     Type
  1789 ;;                  1    wreg      void 
  1790 ;; Registers used:
  1791 ;;		wreg, status,2, status,0, cstack
  1792 ;; Tracked objects:
  1793 ;;		On entry : 0/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1797 ;;      Params:         0       0       0       0       0       0       0       0       0
  1798 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1799 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1800 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1801 ;;Total ram usage:        1 bytes
  1802 ;; Hardware stack levels used:    1
  1803 ;; Hardware stack levels required when called:    4
  1804 ;; This function calls:
  1805 ;;		_escreve_lcd
  1806 ;; This function is called by:
  1807 ;;		_fputc
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811                           	psect	text9
  1812  00147E                     __ptext9:
  1813                           	opt callstack 0
  1814  00147E                     _putch:
  1815                           	opt callstack 22
  1816                           
  1817                           ;incstack = 0
  1818                           ;putch@data stored from wreg
  1819  00147E  6E06               	movwf	putch@data^0,c
  1820  001480                     
  1821                           ;LarguraDePulsoMain.c: 27:   escreve_lcd(data);
  1822  001480  5006               	movf	putch@data^0,w,c
  1823  001482  EC38  F00A         	call	_escreve_lcd
  1824  001486  0012               	return		;funcret
  1825  001488                     __end_of_putch:
  1826                           	opt callstack 0
  1827                           
  1828 ;; *************** function _escreve_lcd *****************
  1829 ;; Defined at:
  1830 ;;		line 33 in file "lcd.c"
  1831 ;; Parameters:    Size  Location     Type
  1832 ;;  c               1    wreg     unsigned char 
  1833 ;; Auto vars:     Size  Location     Type
  1834 ;;  c               1    4[COMRAM] unsigned char 
  1835 ;; Return value:  Size  Location     Type
  1836 ;;                  1    wreg      void 
  1837 ;; Registers used:
  1838 ;;		wreg, status,2, status,0, cstack
  1839 ;; Tracked objects:
  1840 ;;		On entry : 0/0
  1841 ;;		On exit  : 0/0
  1842 ;;		Unchanged: 0/0
  1843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1844 ;;      Params:         0       0       0       0       0       0       0       0       0
  1845 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1846 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1847 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1848 ;;Total ram usage:        1 bytes
  1849 ;; Hardware stack levels used:    1
  1850 ;; Hardware stack levels required when called:    3
  1851 ;; This function calls:
  1852 ;;		_envia_byte_lcd
  1853 ;; This function is called by:
  1854 ;;		_putch
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           	psect	text10
  1859  001470                     __ptext10:
  1860                           	opt callstack 0
  1861  001470                     _escreve_lcd:
  1862                           	opt callstack 22
  1863                           
  1864                           ;incstack = 0
  1865                           ;escreve_lcd@c stored from wreg
  1866  001470  6E05               	movwf	escreve_lcd@c^0,c
  1867  001472  C005  F003         	movff	escreve_lcd@c,envia_byte_lcd@dado
  1868  001476  0E01               	movlw	1
  1869  001478  EC17  F00A         	call	_envia_byte_lcd
  1870  00147C  0012               	return		;funcret
  1871  00147E                     __end_of_escreve_lcd:
  1872                           	opt callstack 0
  1873                           
  1874 ;; *************** function _abs *****************
  1875 ;; Defined at:
  1876 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\abs.c"
  1877 ;; Parameters:    Size  Location     Type
  1878 ;;  a               2   18[COMRAM] int 
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;		None
  1881 ;; Return value:  Size  Location     Type
  1882 ;;                  2   18[COMRAM] int 
  1883 ;; Registers used:
  1884 ;;		wreg, status,2, status,0
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1890 ;;      Params:         2       0       0       0       0       0       0       0       0
  1891 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1892 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1893 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1894 ;;Total ram usage:        4 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; Hardware stack levels required when called:    1
  1897 ;; This function calls:
  1898 ;;		Nothing
  1899 ;; This function is called by:
  1900 ;;		_dtoa
  1901 ;; This function uses a non-reentrant model
  1902 ;;
  1903                           
  1904                           	psect	text11
  1905  00135C                     __ptext11:
  1906                           	opt callstack 0
  1907  00135C                     _abs:
  1908                           	opt callstack 25
  1909  00135C  BE14               	btfsc	(abs@a+1)^0,7,c
  1910  00135E  EFBB  F009         	goto	u610
  1911  001362  5014               	movf	(abs@a+1)^0,w,c
  1912  001364  E106               	bnz	u611
  1913  001366  0413               	decf	abs@a^0,w,c
  1914  001368  B0D8               	btfsc	status,0,c
  1915  00136A  EFB9  F009         	goto	u611
  1916  00136E  EFBB  F009         	goto	u610
  1917  001372                     u611:
  1918  001372  EFC9  F009         	goto	l819
  1919  001376                     u610:
  1920  001376  C013  F015         	movff	abs@a,??_abs
  1921  00137A  C014  F016         	movff	abs@a+1,??_abs+1
  1922  00137E  1E15               	comf	??_abs^0,f,c
  1923  001380  1E16               	comf	(??_abs+1)^0,f,c
  1924  001382  4A15               	infsnz	??_abs^0,f,c
  1925  001384  2A16               	incf	(??_abs+1)^0,f,c
  1926  001386  C015  F013         	movff	??_abs,?_abs
  1927  00138A  C016  F014         	movff	??_abs+1,?_abs+1
  1928  00138E  EFCD  F009         	goto	l822
  1929  001392                     l819:
  1930  001392  C013  F013         	movff	abs@a,?_abs
  1931  001396  C014  F014         	movff	abs@a+1,?_abs+1
  1932  00139A                     l822:
  1933  00139A  0012               	return		;funcret
  1934  00139C                     __end_of_abs:
  1935                           	opt callstack 0
  1936                           
  1937 ;; *************** function ___aomod *****************
  1938 ;; Defined at:
  1939 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aomod.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;  dividend        8    0[COMRAM] long long 
  1942 ;;  divisor         8    8[COMRAM] long long 
  1943 ;; Auto vars:     Size  Location     Type
  1944 ;;  sign            1   17[COMRAM] unsigned char 
  1945 ;;  counter         1   16[COMRAM] unsigned char 
  1946 ;; Return value:  Size  Location     Type
  1947 ;;                  8    0[COMRAM] long long 
  1948 ;; Registers used:
  1949 ;;		wreg, status,2, status,0
  1950 ;; Tracked objects:
  1951 ;;		On entry : 0/0
  1952 ;;		On exit  : 0/0
  1953 ;;		Unchanged: 0/0
  1954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1955 ;;      Params:        16       0       0       0       0       0       0       0       0
  1956 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1957 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1958 ;;      Totals:        18       0       0       0       0       0       0       0       0
  1959 ;;Total ram usage:       18 bytes
  1960 ;; Hardware stack levels used:    1
  1961 ;; Hardware stack levels required when called:    1
  1962 ;; This function calls:
  1963 ;;		Nothing
  1964 ;; This function is called by:
  1965 ;;		_dtoa
  1966 ;; This function uses a non-reentrant model
  1967 ;;
  1968                           
  1969                           	psect	text12
  1970  000E3C                     __ptext12:
  1971                           	opt callstack 0
  1972  000E3C                     ___aomod:
  1973                           	opt callstack 25
  1974  000E3C  0E00               	movlw	0
  1975  000E3E  6E12               	movwf	___aomod@sign^0,c
  1976  000E40  BE08               	btfsc	(___aomod@dividend+7)^0,7,c
  1977  000E42  EF27  F007         	goto	u690
  1978  000E46  EF25  F007         	goto	u691
  1979  000E4A                     u691:
  1980  000E4A  EF39  F007         	goto	l1341
  1981  000E4E                     u690:
  1982  000E4E  1E08               	comf	(___aomod@dividend+7)^0,f,c
  1983  000E50  1E07               	comf	(___aomod@dividend+6)^0,f,c
  1984  000E52  1E06               	comf	(___aomod@dividend+5)^0,f,c
  1985  000E54  1E05               	comf	(___aomod@dividend+4)^0,f,c
  1986  000E56  1E04               	comf	(___aomod@dividend+3)^0,f,c
  1987  000E58  1E03               	comf	(___aomod@dividend+2)^0,f,c
  1988  000E5A  1E02               	comf	(___aomod@dividend+1)^0,f,c
  1989  000E5C  6C01               	negf	___aomod@dividend^0,c
  1990  000E5E  0E00               	movlw	0
  1991  000E60  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  1992  000E62  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  1993  000E64  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  1994  000E66  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  1995  000E68  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  1996  000E6A  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  1997  000E6C  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  1998  000E6E  0E01               	movlw	1
  1999  000E70  6E12               	movwf	___aomod@sign^0,c
  2000  000E72                     l1341:
  2001  000E72  BE10               	btfsc	(___aomod@divisor+7)^0,7,c
  2002  000E74  EF40  F007         	goto	u700
  2003  000E78  EF3E  F007         	goto	u701
  2004  000E7C                     u701:
  2005  000E7C  EF50  F007         	goto	l1345
  2006  000E80                     u700:
  2007  000E80  1E10               	comf	(___aomod@divisor+7)^0,f,c
  2008  000E82  1E0F               	comf	(___aomod@divisor+6)^0,f,c
  2009  000E84  1E0E               	comf	(___aomod@divisor+5)^0,f,c
  2010  000E86  1E0D               	comf	(___aomod@divisor+4)^0,f,c
  2011  000E88  1E0C               	comf	(___aomod@divisor+3)^0,f,c
  2012  000E8A  1E0B               	comf	(___aomod@divisor+2)^0,f,c
  2013  000E8C  1E0A               	comf	(___aomod@divisor+1)^0,f,c
  2014  000E8E  6C09               	negf	___aomod@divisor^0,c
  2015  000E90  0E00               	movlw	0
  2016  000E92  220A               	addwfc	(___aomod@divisor+1)^0,f,c
  2017  000E94  220B               	addwfc	(___aomod@divisor+2)^0,f,c
  2018  000E96  220C               	addwfc	(___aomod@divisor+3)^0,f,c
  2019  000E98  220D               	addwfc	(___aomod@divisor+4)^0,f,c
  2020  000E9A  220E               	addwfc	(___aomod@divisor+5)^0,f,c
  2021  000E9C  220F               	addwfc	(___aomod@divisor+6)^0,f,c
  2022  000E9E  2210               	addwfc	(___aomod@divisor+7)^0,f,c
  2023  000EA0                     l1345:
  2024  000EA0  5009               	movf	___aomod@divisor^0,w,c
  2025  000EA2  100A               	iorwf	(___aomod@divisor+1)^0,w,c
  2026  000EA4  100B               	iorwf	(___aomod@divisor+2)^0,w,c
  2027  000EA6  100C               	iorwf	(___aomod@divisor+3)^0,w,c
  2028  000EA8  100D               	iorwf	(___aomod@divisor+4)^0,w,c
  2029  000EAA  100E               	iorwf	(___aomod@divisor+5)^0,w,c
  2030  000EAC  100F               	iorwf	(___aomod@divisor+6)^0,w,c
  2031  000EAE  1010               	iorwf	(___aomod@divisor+7)^0,w,c
  2032  000EB0  B4D8               	btfsc	status,2,c
  2033  000EB2  EF5D  F007         	goto	u711
  2034  000EB6  EF5F  F007         	goto	u710
  2035  000EBA                     u711:
  2036  000EBA  EFA7  F007         	goto	l1361
  2037  000EBE                     u710:
  2038  000EBE  0E01               	movlw	1
  2039  000EC0  6E11               	movwf	___aomod@counter^0,c
  2040  000EC2  EF6D  F007         	goto	l1351
  2041  000EC6                     l1349:
  2042  000EC6  90D8               	bcf	status,0,c
  2043  000EC8  3609               	rlcf	___aomod@divisor^0,f,c
  2044  000ECA  360A               	rlcf	(___aomod@divisor+1)^0,f,c
  2045  000ECC  360B               	rlcf	(___aomod@divisor+2)^0,f,c
  2046  000ECE  360C               	rlcf	(___aomod@divisor+3)^0,f,c
  2047  000ED0  360D               	rlcf	(___aomod@divisor+4)^0,f,c
  2048  000ED2  360E               	rlcf	(___aomod@divisor+5)^0,f,c
  2049  000ED4  360F               	rlcf	(___aomod@divisor+6)^0,f,c
  2050  000ED6  3610               	rlcf	(___aomod@divisor+7)^0,f,c
  2051  000ED8  2A11               	incf	___aomod@counter^0,f,c
  2052  000EDA                     l1351:
  2053  000EDA  AE10               	btfss	(___aomod@divisor+7)^0,7,c
  2054  000EDC  EF72  F007         	goto	u721
  2055  000EE0  EF74  F007         	goto	u720
  2056  000EE4                     u721:
  2057  000EE4  EF63  F007         	goto	l1349
  2058  000EE8                     u720:
  2059  000EE8                     l1353:
  2060  000EE8  5009               	movf	___aomod@divisor^0,w,c
  2061  000EEA  5C01               	subwf	___aomod@dividend^0,w,c
  2062  000EEC  500A               	movf	(___aomod@divisor+1)^0,w,c
  2063  000EEE  5802               	subwfb	(___aomod@dividend+1)^0,w,c
  2064  000EF0  500B               	movf	(___aomod@divisor+2)^0,w,c
  2065  000EF2  5803               	subwfb	(___aomod@dividend+2)^0,w,c
  2066  000EF4  500C               	movf	(___aomod@divisor+3)^0,w,c
  2067  000EF6  5804               	subwfb	(___aomod@dividend+3)^0,w,c
  2068  000EF8  500D               	movf	(___aomod@divisor+4)^0,w,c
  2069  000EFA  5805               	subwfb	(___aomod@dividend+4)^0,w,c
  2070  000EFC  500E               	movf	(___aomod@divisor+5)^0,w,c
  2071  000EFE  5806               	subwfb	(___aomod@dividend+5)^0,w,c
  2072  000F00  500F               	movf	(___aomod@divisor+6)^0,w,c
  2073  000F02  5807               	subwfb	(___aomod@dividend+6)^0,w,c
  2074  000F04  5010               	movf	(___aomod@divisor+7)^0,w,c
  2075  000F06  5808               	subwfb	(___aomod@dividend+7)^0,w,c
  2076  000F08  A0D8               	btfss	status,0,c
  2077  000F0A  EF89  F007         	goto	u731
  2078  000F0E  EF8B  F007         	goto	u730
  2079  000F12                     u731:
  2080  000F12  EF9B  F007         	goto	l1357
  2081  000F16                     u730:
  2082  000F16  5009               	movf	___aomod@divisor^0,w,c
  2083  000F18  5E01               	subwf	___aomod@dividend^0,f,c
  2084  000F1A  500A               	movf	(___aomod@divisor+1)^0,w,c
  2085  000F1C  5A02               	subwfb	(___aomod@dividend+1)^0,f,c
  2086  000F1E  500B               	movf	(___aomod@divisor+2)^0,w,c
  2087  000F20  5A03               	subwfb	(___aomod@dividend+2)^0,f,c
  2088  000F22  500C               	movf	(___aomod@divisor+3)^0,w,c
  2089  000F24  5A04               	subwfb	(___aomod@dividend+3)^0,f,c
  2090  000F26  500D               	movf	(___aomod@divisor+4)^0,w,c
  2091  000F28  5A05               	subwfb	(___aomod@dividend+4)^0,f,c
  2092  000F2A  500E               	movf	(___aomod@divisor+5)^0,w,c
  2093  000F2C  5A06               	subwfb	(___aomod@dividend+5)^0,f,c
  2094  000F2E  500F               	movf	(___aomod@divisor+6)^0,w,c
  2095  000F30  5A07               	subwfb	(___aomod@dividend+6)^0,f,c
  2096  000F32  5010               	movf	(___aomod@divisor+7)^0,w,c
  2097  000F34  5A08               	subwfb	(___aomod@dividend+7)^0,f,c
  2098  000F36                     l1357:
  2099  000F36  90D8               	bcf	status,0,c
  2100  000F38  3210               	rrcf	(___aomod@divisor+7)^0,f,c
  2101  000F3A  320F               	rrcf	(___aomod@divisor+6)^0,f,c
  2102  000F3C  320E               	rrcf	(___aomod@divisor+5)^0,f,c
  2103  000F3E  320D               	rrcf	(___aomod@divisor+4)^0,f,c
  2104  000F40  320C               	rrcf	(___aomod@divisor+3)^0,f,c
  2105  000F42  320B               	rrcf	(___aomod@divisor+2)^0,f,c
  2106  000F44  320A               	rrcf	(___aomod@divisor+1)^0,f,c
  2107  000F46  3209               	rrcf	___aomod@divisor^0,f,c
  2108  000F48  2E11               	decfsz	___aomod@counter^0,f,c
  2109  000F4A  EF74  F007         	goto	l1353
  2110  000F4E                     l1361:
  2111  000F4E  5012               	movf	___aomod@sign^0,w,c
  2112  000F50  B4D8               	btfsc	status,2,c
  2113  000F52  EFAD  F007         	goto	u741
  2114  000F56  EFAF  F007         	goto	u740
  2115  000F5A                     u741:
  2116  000F5A  EFBF  F007         	goto	l1365
  2117  000F5E                     u740:
  2118  000F5E  1E08               	comf	(___aomod@dividend+7)^0,f,c
  2119  000F60  1E07               	comf	(___aomod@dividend+6)^0,f,c
  2120  000F62  1E06               	comf	(___aomod@dividend+5)^0,f,c
  2121  000F64  1E05               	comf	(___aomod@dividend+4)^0,f,c
  2122  000F66  1E04               	comf	(___aomod@dividend+3)^0,f,c
  2123  000F68  1E03               	comf	(___aomod@dividend+2)^0,f,c
  2124  000F6A  1E02               	comf	(___aomod@dividend+1)^0,f,c
  2125  000F6C  6C01               	negf	___aomod@dividend^0,c
  2126  000F6E  0E00               	movlw	0
  2127  000F70  2202               	addwfc	(___aomod@dividend+1)^0,f,c
  2128  000F72  2203               	addwfc	(___aomod@dividend+2)^0,f,c
  2129  000F74  2204               	addwfc	(___aomod@dividend+3)^0,f,c
  2130  000F76  2205               	addwfc	(___aomod@dividend+4)^0,f,c
  2131  000F78  2206               	addwfc	(___aomod@dividend+5)^0,f,c
  2132  000F7A  2207               	addwfc	(___aomod@dividend+6)^0,f,c
  2133  000F7C  2208               	addwfc	(___aomod@dividend+7)^0,f,c
  2134  000F7E                     l1365:
  2135  000F7E  C001  F001         	movff	___aomod@dividend,?___aomod
  2136  000F82  C002  F002         	movff	___aomod@dividend+1,?___aomod+1
  2137  000F86  C003  F003         	movff	___aomod@dividend+2,?___aomod+2
  2138  000F8A  C004  F004         	movff	___aomod@dividend+3,?___aomod+3
  2139  000F8E  C005  F005         	movff	___aomod@dividend+4,?___aomod+4
  2140  000F92  C006  F006         	movff	___aomod@dividend+5,?___aomod+5
  2141  000F96  C007  F007         	movff	___aomod@dividend+6,?___aomod+6
  2142  000F9A  C008  F008         	movff	___aomod@dividend+7,?___aomod+7
  2143  000F9E  0012               	return		;funcret
  2144  000FA0                     __end_of___aomod:
  2145                           	opt callstack 0
  2146                           
  2147 ;; *************** function ___aodiv *****************
  2148 ;; Defined at:
  2149 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aodiv.c"
  2150 ;; Parameters:    Size  Location     Type
  2151 ;;  dividend        8    0[COMRAM] long long 
  2152 ;;  divisor         8    8[COMRAM] long long 
  2153 ;; Auto vars:     Size  Location     Type
  2154 ;;  quotient        8   18[COMRAM] long long 
  2155 ;;  sign            1   17[COMRAM] unsigned char 
  2156 ;;  counter         1   16[COMRAM] unsigned char 
  2157 ;; Return value:  Size  Location     Type
  2158 ;;                  8    0[COMRAM] long long 
  2159 ;; Registers used:
  2160 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2161 ;; Tracked objects:
  2162 ;;		On entry : 0/0
  2163 ;;		On exit  : 0/0
  2164 ;;		Unchanged: 0/0
  2165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2166 ;;      Params:        16       0       0       0       0       0       0       0       0
  2167 ;;      Locals:        10       0       0       0       0       0       0       0       0
  2168 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2169 ;;      Totals:        26       0       0       0       0       0       0       0       0
  2170 ;;Total ram usage:       26 bytes
  2171 ;; Hardware stack levels used:    1
  2172 ;; Hardware stack levels required when called:    1
  2173 ;; This function calls:
  2174 ;;		Nothing
  2175 ;; This function is called by:
  2176 ;;		_dtoa
  2177 ;; This function uses a non-reentrant model
  2178 ;;
  2179                           
  2180                           	psect	text13
  2181  000CB4                     __ptext13:
  2182                           	opt callstack 0
  2183  000CB4                     ___aodiv:
  2184                           	opt callstack 25
  2185  000CB4  0E00               	movlw	0
  2186  000CB6  6E12               	movwf	___aodiv@sign^0,c
  2187  000CB8  BE10               	btfsc	(___aodiv@divisor+7)^0,7,c
  2188  000CBA  EF63  F006         	goto	u620
  2189  000CBE  EF61  F006         	goto	u621
  2190  000CC2                     u621:
  2191  000CC2  EF75  F006         	goto	l1297
  2192  000CC6                     u620:
  2193  000CC6  1E10               	comf	(___aodiv@divisor+7)^0,f,c
  2194  000CC8  1E0F               	comf	(___aodiv@divisor+6)^0,f,c
  2195  000CCA  1E0E               	comf	(___aodiv@divisor+5)^0,f,c
  2196  000CCC  1E0D               	comf	(___aodiv@divisor+4)^0,f,c
  2197  000CCE  1E0C               	comf	(___aodiv@divisor+3)^0,f,c
  2198  000CD0  1E0B               	comf	(___aodiv@divisor+2)^0,f,c
  2199  000CD2  1E0A               	comf	(___aodiv@divisor+1)^0,f,c
  2200  000CD4  6C09               	negf	___aodiv@divisor^0,c
  2201  000CD6  0E00               	movlw	0
  2202  000CD8  220A               	addwfc	(___aodiv@divisor+1)^0,f,c
  2203  000CDA  220B               	addwfc	(___aodiv@divisor+2)^0,f,c
  2204  000CDC  220C               	addwfc	(___aodiv@divisor+3)^0,f,c
  2205  000CDE  220D               	addwfc	(___aodiv@divisor+4)^0,f,c
  2206  000CE0  220E               	addwfc	(___aodiv@divisor+5)^0,f,c
  2207  000CE2  220F               	addwfc	(___aodiv@divisor+6)^0,f,c
  2208  000CE4  2210               	addwfc	(___aodiv@divisor+7)^0,f,c
  2209  000CE6  0E01               	movlw	1
  2210  000CE8  6E12               	movwf	___aodiv@sign^0,c
  2211  000CEA                     l1297:
  2212  000CEA  BE08               	btfsc	(___aodiv@dividend+7)^0,7,c
  2213  000CEC  EF7C  F006         	goto	u630
  2214  000CF0  EF7A  F006         	goto	u631
  2215  000CF4                     u631:
  2216  000CF4  EF8E  F006         	goto	l1303
  2217  000CF8                     u630:
  2218  000CF8  1E08               	comf	(___aodiv@dividend+7)^0,f,c
  2219  000CFA  1E07               	comf	(___aodiv@dividend+6)^0,f,c
  2220  000CFC  1E06               	comf	(___aodiv@dividend+5)^0,f,c
  2221  000CFE  1E05               	comf	(___aodiv@dividend+4)^0,f,c
  2222  000D00  1E04               	comf	(___aodiv@dividend+3)^0,f,c
  2223  000D02  1E03               	comf	(___aodiv@dividend+2)^0,f,c
  2224  000D04  1E02               	comf	(___aodiv@dividend+1)^0,f,c
  2225  000D06  6C01               	negf	___aodiv@dividend^0,c
  2226  000D08  0E00               	movlw	0
  2227  000D0A  2202               	addwfc	(___aodiv@dividend+1)^0,f,c
  2228  000D0C  2203               	addwfc	(___aodiv@dividend+2)^0,f,c
  2229  000D0E  2204               	addwfc	(___aodiv@dividend+3)^0,f,c
  2230  000D10  2205               	addwfc	(___aodiv@dividend+4)^0,f,c
  2231  000D12  2206               	addwfc	(___aodiv@dividend+5)^0,f,c
  2232  000D14  2207               	addwfc	(___aodiv@dividend+6)^0,f,c
  2233  000D16  2208               	addwfc	(___aodiv@dividend+7)^0,f,c
  2234  000D18  0E01               	movlw	1
  2235  000D1A  1A12               	xorwf	___aodiv@sign^0,f,c
  2236  000D1C                     l1303:
  2237  000D1C  EE20  F013         	lfsr	2,___aodiv@quotient
  2238  000D20  0E07               	movlw	7
  2239  000D22                     u641:
  2240  000D22  6ADE               	clrf	postinc2,c
  2241  000D24  06E8               	decf	wreg,f,c
  2242  000D26  E2FD               	bc	u641
  2243  000D28  5009               	movf	___aodiv@divisor^0,w,c
  2244  000D2A  100A               	iorwf	(___aodiv@divisor+1)^0,w,c
  2245  000D2C  100B               	iorwf	(___aodiv@divisor+2)^0,w,c
  2246  000D2E  100C               	iorwf	(___aodiv@divisor+3)^0,w,c
  2247  000D30  100D               	iorwf	(___aodiv@divisor+4)^0,w,c
  2248  000D32  100E               	iorwf	(___aodiv@divisor+5)^0,w,c
  2249  000D34  100F               	iorwf	(___aodiv@divisor+6)^0,w,c
  2250  000D36  1010               	iorwf	(___aodiv@divisor+7)^0,w,c
  2251  000D38  B4D8               	btfsc	status,2,c
  2252  000D3A  EFA1  F006         	goto	u651
  2253  000D3E  EFA3  F006         	goto	u650
  2254  000D42                     u651:
  2255  000D42  EFF5  F006         	goto	l1325
  2256  000D46                     u650:
  2257  000D46  0E01               	movlw	1
  2258  000D48  6E11               	movwf	___aodiv@counter^0,c
  2259  000D4A  EFB1  F006         	goto	l1311
  2260  000D4E                     l1309:
  2261  000D4E  90D8               	bcf	status,0,c
  2262  000D50  3609               	rlcf	___aodiv@divisor^0,f,c
  2263  000D52  360A               	rlcf	(___aodiv@divisor+1)^0,f,c
  2264  000D54  360B               	rlcf	(___aodiv@divisor+2)^0,f,c
  2265  000D56  360C               	rlcf	(___aodiv@divisor+3)^0,f,c
  2266  000D58  360D               	rlcf	(___aodiv@divisor+4)^0,f,c
  2267  000D5A  360E               	rlcf	(___aodiv@divisor+5)^0,f,c
  2268  000D5C  360F               	rlcf	(___aodiv@divisor+6)^0,f,c
  2269  000D5E  3610               	rlcf	(___aodiv@divisor+7)^0,f,c
  2270  000D60  2A11               	incf	___aodiv@counter^0,f,c
  2271  000D62                     l1311:
  2272  000D62  AE10               	btfss	(___aodiv@divisor+7)^0,7,c
  2273  000D64  EFB6  F006         	goto	u661
  2274  000D68  EFB8  F006         	goto	u660
  2275  000D6C                     u661:
  2276  000D6C  EFA7  F006         	goto	l1309
  2277  000D70                     u660:
  2278  000D70                     l1313:
  2279  000D70  90D8               	bcf	status,0,c
  2280  000D72  3613               	rlcf	___aodiv@quotient^0,f,c
  2281  000D74  3614               	rlcf	(___aodiv@quotient+1)^0,f,c
  2282  000D76  3615               	rlcf	(___aodiv@quotient+2)^0,f,c
  2283  000D78  3616               	rlcf	(___aodiv@quotient+3)^0,f,c
  2284  000D7A  3617               	rlcf	(___aodiv@quotient+4)^0,f,c
  2285  000D7C  3618               	rlcf	(___aodiv@quotient+5)^0,f,c
  2286  000D7E  3619               	rlcf	(___aodiv@quotient+6)^0,f,c
  2287  000D80  361A               	rlcf	(___aodiv@quotient+7)^0,f,c
  2288  000D82  5009               	movf	___aodiv@divisor^0,w,c
  2289  000D84  5C01               	subwf	___aodiv@dividend^0,w,c
  2290  000D86  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2291  000D88  5802               	subwfb	(___aodiv@dividend+1)^0,w,c
  2292  000D8A  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2293  000D8C  5803               	subwfb	(___aodiv@dividend+2)^0,w,c
  2294  000D8E  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2295  000D90  5804               	subwfb	(___aodiv@dividend+3)^0,w,c
  2296  000D92  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2297  000D94  5805               	subwfb	(___aodiv@dividend+4)^0,w,c
  2298  000D96  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2299  000D98  5806               	subwfb	(___aodiv@dividend+5)^0,w,c
  2300  000D9A  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2301  000D9C  5807               	subwfb	(___aodiv@dividend+6)^0,w,c
  2302  000D9E  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2303  000DA0  5808               	subwfb	(___aodiv@dividend+7)^0,w,c
  2304  000DA2  A0D8               	btfss	status,0,c
  2305  000DA4  EFD6  F006         	goto	u671
  2306  000DA8  EFD8  F006         	goto	u670
  2307  000DAC                     u671:
  2308  000DAC  EFE9  F006         	goto	l1321
  2309  000DB0                     u670:
  2310  000DB0  5009               	movf	___aodiv@divisor^0,w,c
  2311  000DB2  5E01               	subwf	___aodiv@dividend^0,f,c
  2312  000DB4  500A               	movf	(___aodiv@divisor+1)^0,w,c
  2313  000DB6  5A02               	subwfb	(___aodiv@dividend+1)^0,f,c
  2314  000DB8  500B               	movf	(___aodiv@divisor+2)^0,w,c
  2315  000DBA  5A03               	subwfb	(___aodiv@dividend+2)^0,f,c
  2316  000DBC  500C               	movf	(___aodiv@divisor+3)^0,w,c
  2317  000DBE  5A04               	subwfb	(___aodiv@dividend+3)^0,f,c
  2318  000DC0  500D               	movf	(___aodiv@divisor+4)^0,w,c
  2319  000DC2  5A05               	subwfb	(___aodiv@dividend+4)^0,f,c
  2320  000DC4  500E               	movf	(___aodiv@divisor+5)^0,w,c
  2321  000DC6  5A06               	subwfb	(___aodiv@dividend+5)^0,f,c
  2322  000DC8  500F               	movf	(___aodiv@divisor+6)^0,w,c
  2323  000DCA  5A07               	subwfb	(___aodiv@dividend+6)^0,f,c
  2324  000DCC  5010               	movf	(___aodiv@divisor+7)^0,w,c
  2325  000DCE  5A08               	subwfb	(___aodiv@dividend+7)^0,f,c
  2326  000DD0  8013               	bsf	___aodiv@quotient^0,0,c
  2327  000DD2                     l1321:
  2328  000DD2  90D8               	bcf	status,0,c
  2329  000DD4  3210               	rrcf	(___aodiv@divisor+7)^0,f,c
  2330  000DD6  320F               	rrcf	(___aodiv@divisor+6)^0,f,c
  2331  000DD8  320E               	rrcf	(___aodiv@divisor+5)^0,f,c
  2332  000DDA  320D               	rrcf	(___aodiv@divisor+4)^0,f,c
  2333  000DDC  320C               	rrcf	(___aodiv@divisor+3)^0,f,c
  2334  000DDE  320B               	rrcf	(___aodiv@divisor+2)^0,f,c
  2335  000DE0  320A               	rrcf	(___aodiv@divisor+1)^0,f,c
  2336  000DE2  3209               	rrcf	___aodiv@divisor^0,f,c
  2337  000DE4  2E11               	decfsz	___aodiv@counter^0,f,c
  2338  000DE6  EFB8  F006         	goto	l1313
  2339  000DEA                     l1325:
  2340  000DEA  5012               	movf	___aodiv@sign^0,w,c
  2341  000DEC  B4D8               	btfsc	status,2,c
  2342  000DEE  EFFB  F006         	goto	u681
  2343  000DF2  EFFD  F006         	goto	u680
  2344  000DF6                     u681:
  2345  000DF6  EF0D  F007         	goto	l1329
  2346  000DFA                     u680:
  2347  000DFA  1E1A               	comf	(___aodiv@quotient+7)^0,f,c
  2348  000DFC  1E19               	comf	(___aodiv@quotient+6)^0,f,c
  2349  000DFE  1E18               	comf	(___aodiv@quotient+5)^0,f,c
  2350  000E00  1E17               	comf	(___aodiv@quotient+4)^0,f,c
  2351  000E02  1E16               	comf	(___aodiv@quotient+3)^0,f,c
  2352  000E04  1E15               	comf	(___aodiv@quotient+2)^0,f,c
  2353  000E06  1E14               	comf	(___aodiv@quotient+1)^0,f,c
  2354  000E08  6C13               	negf	___aodiv@quotient^0,c
  2355  000E0A  0E00               	movlw	0
  2356  000E0C  2214               	addwfc	(___aodiv@quotient+1)^0,f,c
  2357  000E0E  2215               	addwfc	(___aodiv@quotient+2)^0,f,c
  2358  000E10  2216               	addwfc	(___aodiv@quotient+3)^0,f,c
  2359  000E12  2217               	addwfc	(___aodiv@quotient+4)^0,f,c
  2360  000E14  2218               	addwfc	(___aodiv@quotient+5)^0,f,c
  2361  000E16  2219               	addwfc	(___aodiv@quotient+6)^0,f,c
  2362  000E18  221A               	addwfc	(___aodiv@quotient+7)^0,f,c
  2363  000E1A                     l1329:
  2364  000E1A  C013  F001         	movff	___aodiv@quotient,?___aodiv
  2365  000E1E  C014  F002         	movff	___aodiv@quotient+1,?___aodiv+1
  2366  000E22  C015  F003         	movff	___aodiv@quotient+2,?___aodiv+2
  2367  000E26  C016  F004         	movff	___aodiv@quotient+3,?___aodiv+3
  2368  000E2A  C017  F005         	movff	___aodiv@quotient+4,?___aodiv+4
  2369  000E2E  C018  F006         	movff	___aodiv@quotient+5,?___aodiv+5
  2370  000E32  C019  F007         	movff	___aodiv@quotient+6,?___aodiv+6
  2371  000E36  C01A  F008         	movff	___aodiv@quotient+7,?___aodiv+7
  2372  000E3A  0012               	return		;funcret
  2373  000E3C                     __end_of___aodiv:
  2374                           	opt callstack 0
  2375                           
  2376 ;; *************** function _inicializa_lcd *****************
  2377 ;; Defined at:
  2378 ;;		line 43 in file "lcd.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;		None
  2381 ;; Auto vars:     Size  Location     Type
  2382 ;;		None
  2383 ;; Return value:  Size  Location     Type
  2384 ;;                  1    wreg      void 
  2385 ;; Registers used:
  2386 ;;		wreg, status,2, status,0, cstack
  2387 ;; Tracked objects:
  2388 ;;		On entry : 0/0
  2389 ;;		On exit  : 0/0
  2390 ;;		Unchanged: 0/0
  2391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2392 ;;      Params:         0       0       0       0       0       0       0       0       0
  2393 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2394 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2395 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2396 ;;Total ram usage:        1 bytes
  2397 ;; Hardware stack levels used:    1
  2398 ;; Hardware stack levels required when called:    3
  2399 ;; This function calls:
  2400 ;;		_envia_byte_lcd
  2401 ;;		_envia_nibble_lcd
  2402 ;; This function is called by:
  2403 ;;		_main
  2404 ;; This function uses a non-reentrant model
  2405 ;;
  2406                           
  2407                           	psect	text14
  2408  001184                     __ptext14:
  2409                           	opt callstack 0
  2410  001184                     _inicializa_lcd:
  2411                           	opt callstack 27
  2412  001184                     
  2413                           ;lcd.c: 45:  PORTDbits.RD1 = 0;
  2414  001184  9283               	bcf	131,1,c	;volatile
  2415                           
  2416                           ;lcd.c: 46:  PORTDbits.RD4 = 0;
  2417  001186  9883               	bcf	131,4,c	;volatile
  2418                           
  2419                           ;lcd.c: 47:  PORTDbits.RD5 = 0;
  2420  001188  9A83               	bcf	131,5,c	;volatile
  2421                           
  2422                           ;lcd.c: 48:  PORTDbits.RD6 = 0;
  2423  00118A  9C83               	bcf	131,6,c	;volatile
  2424                           
  2425                           ;lcd.c: 49:  PORTDbits.RD7 = 0;
  2426  00118C  9E83               	bcf	131,7,c	;volatile
  2427  00118E                     
  2428                           ;lcd.c: 51:  _delay((unsigned long)((50)*(4000000/4000.0)));
  2429  00118E  0E41               	movlw	65
  2430  001190  6E05               	movwf	??_inicializa_lcd^0,c
  2431  001192  0EEE               	movlw	238
  2432  001194                     u1007:
  2433  001194  2EE8               	decfsz	wreg,f,c
  2434  001196  D7FE               	bra	u1007
  2435  001198  2E05               	decfsz	??_inicializa_lcd^0,f,c
  2436  00119A  D7FC               	bra	u1007
  2437  00119C  D000               	nop2	
  2438  00119E                     
  2439                           ;lcd.c: 52:  envia_nibble_lcd(0x03);
  2440  00119E  0E03               	movlw	3
  2441  0011A0  EC7E  F008         	call	_envia_nibble_lcd
  2442  0011A4                     
  2443                           ;lcd.c: 53:  _delay((unsigned long)((4)*(4000000/4000.0)));
  2444  0011A4  0E06               	movlw	6
  2445  0011A6  6E05               	movwf	??_inicializa_lcd^0,c
  2446  0011A8  0E30               	movlw	48
  2447  0011AA                     u1017:
  2448  0011AA  2EE8               	decfsz	wreg,f,c
  2449  0011AC  D7FE               	bra	u1017
  2450  0011AE  2E05               	decfsz	??_inicializa_lcd^0,f,c
  2451  0011B0  D7FC               	bra	u1017
  2452  0011B2  D000               	nop2	
  2453                           
  2454                           ;lcd.c: 54:  envia_nibble_lcd(0x03);
  2455  0011B4  0E03               	movlw	3
  2456  0011B6  EC7E  F008         	call	_envia_nibble_lcd
  2457  0011BA                     
  2458                           ;lcd.c: 55:  _delay((unsigned long)((100)*(4000000/4000000.0)));
  2459  0011BA  0E21               	movlw	33
  2460  0011BC                     u1027:
  2461  0011BC  2EE8               	decfsz	wreg,f,c
  2462  0011BE  D7FE               	bra	u1027
  2463  0011C0  F000               	nop	
  2464  0011C2                     
  2465                           ;lcd.c: 56:  envia_nibble_lcd(0x03);
  2466  0011C2  0E03               	movlw	3
  2467  0011C4  EC7E  F008         	call	_envia_nibble_lcd
  2468  0011C8                     
  2469                           ;lcd.c: 58:  envia_nibble_lcd(0x02);
  2470  0011C8  0E02               	movlw	2
  2471  0011CA  EC7E  F008         	call	_envia_nibble_lcd
  2472  0011CE                     
  2473                           ;lcd.c: 60:  envia_byte_lcd(0,0x01);
  2474  0011CE  0E01               	movlw	1
  2475  0011D0  6E03               	movwf	envia_byte_lcd@dado^0,c
  2476  0011D2  0E00               	movlw	0
  2477  0011D4  EC17  F00A         	call	_envia_byte_lcd
  2478                           
  2479                           ;lcd.c: 61:  _delay((unsigned long)((2)*(4000000/4000.0)));
  2480  0011D8  0E03               	movlw	3
  2481  0011DA  6E05               	movwf	??_inicializa_lcd^0,c
  2482  0011DC  0E98               	movlw	152
  2483  0011DE                     u1037:
  2484  0011DE  2EE8               	decfsz	wreg,f,c
  2485  0011E0  D7FE               	bra	u1037
  2486  0011E2  2E05               	decfsz	??_inicializa_lcd^0,f,c
  2487  0011E4  D7FC               	bra	u1037
  2488  0011E6                     
  2489                           ;lcd.c: 63:  envia_byte_lcd(0,0x28);
  2490  0011E6  0E28               	movlw	40
  2491  0011E8  6E03               	movwf	envia_byte_lcd@dado^0,c
  2492  0011EA  0E00               	movlw	0
  2493  0011EC  EC17  F00A         	call	_envia_byte_lcd
  2494  0011F0                     
  2495                           ;lcd.c: 65:  envia_byte_lcd(0,0x0c);
  2496  0011F0  0E0C               	movlw	12
  2497  0011F2  6E03               	movwf	envia_byte_lcd@dado^0,c
  2498  0011F4  0E00               	movlw	0
  2499  0011F6  EC17  F00A         	call	_envia_byte_lcd
  2500  0011FA                     
  2501                           ;lcd.c: 67:  envia_byte_lcd(0,0x06);
  2502  0011FA  0E06               	movlw	6
  2503  0011FC  6E03               	movwf	envia_byte_lcd@dado^0,c
  2504  0011FE  0E00               	movlw	0
  2505  001200  EC17  F00A         	call	_envia_byte_lcd
  2506  001204  0012               	return		;funcret
  2507  001206                     __end_of_inicializa_lcd:
  2508                           	opt callstack 0
  2509                           
  2510 ;; *************** function _caracter_inicio *****************
  2511 ;; Defined at:
  2512 ;;		line 73 in file "lcd.c"
  2513 ;; Parameters:    Size  Location     Type
  2514 ;;  linha           1    wreg     unsigned char 
  2515 ;;  coluna          1    4[COMRAM] unsigned char 
  2516 ;; Auto vars:     Size  Location     Type
  2517 ;;  linha           1    5[COMRAM] unsigned char 
  2518 ;;  posicao         1    6[COMRAM] unsigned char 
  2519 ;; Return value:  Size  Location     Type
  2520 ;;                  1    wreg      void 
  2521 ;; Registers used:
  2522 ;;		wreg, status,2, status,0, cstack
  2523 ;; Tracked objects:
  2524 ;;		On entry : 0/0
  2525 ;;		On exit  : 0/0
  2526 ;;		Unchanged: 0/0
  2527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2528 ;;      Params:         1       0       0       0       0       0       0       0       0
  2529 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2530 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2531 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2532 ;;Total ram usage:        3 bytes
  2533 ;; Hardware stack levels used:    1
  2534 ;; Hardware stack levels required when called:    3
  2535 ;; This function calls:
  2536 ;;		_envia_byte_lcd
  2537 ;; This function is called by:
  2538 ;;		_main
  2539 ;; This function uses a non-reentrant model
  2540 ;;
  2541                           
  2542                           	psect	text15
  2543  00131A                     __ptext15:
  2544                           	opt callstack 0
  2545  00131A                     _caracter_inicio:
  2546                           	opt callstack 27
  2547                           
  2548                           ;incstack = 0
  2549                           ;caracter_inicio@linha stored from wreg
  2550  00131A  6E06               	movwf	caracter_inicio@linha^0,c
  2551  00131C                     
  2552                           ;lcd.c: 73:  void caracter_inicio(char linha,char coluna);lcd.c: 74: {;lcd.c: 75:  char 
      +                          posicao=0;
  2553  00131C  0E00               	movlw	0
  2554  00131E  6E07               	movwf	caracter_inicio@posicao^0,c
  2555  001320                     
  2556                           ;lcd.c: 76:  if(linha == 1)
  2557  001320  0406               	decf	caracter_inicio@linha^0,w,c
  2558  001322  A4D8               	btfss	status,2,c
  2559  001324  EF96  F009         	goto	u951
  2560  001328  EF98  F009         	goto	u950
  2561  00132C                     u951:
  2562  00132C  EF9A  F009         	goto	l1509
  2563  001330                     u950:
  2564  001330                     
  2565                           ;lcd.c: 77: {;lcd.c: 78:  posicao=0x80;
  2566  001330  0E80               	movlw	128
  2567  001332  6E07               	movwf	caracter_inicio@posicao^0,c
  2568  001334                     l1509:
  2569                           
  2570                           ;lcd.c: 80:  if(linha == 2)
  2571  001334  0E02               	movlw	2
  2572  001336  1806               	xorwf	caracter_inicio@linha^0,w,c
  2573  001338  A4D8               	btfss	status,2,c
  2574  00133A  EFA1  F009         	goto	u961
  2575  00133E  EFA3  F009         	goto	u960
  2576  001342                     u961:
  2577  001342  EFA5  F009         	goto	l1513
  2578  001346                     u960:
  2579  001346                     
  2580                           ;lcd.c: 81: {;lcd.c: 82:  posicao=0xc0;
  2581  001346  0EC0               	movlw	192
  2582  001348  6E07               	movwf	caracter_inicio@posicao^0,c
  2583  00134A                     l1513:
  2584                           
  2585                           ;lcd.c: 85: posicao=posicao+coluna;
  2586  00134A  5007               	movf	caracter_inicio@posicao^0,w,c
  2587  00134C  2405               	addwf	caracter_inicio@coluna^0,w,c
  2588  00134E  6E07               	movwf	caracter_inicio@posicao^0,c
  2589  001350                     
  2590                           ;lcd.c: 87: envia_byte_lcd(0,posicao);
  2591  001350  C007  F003         	movff	caracter_inicio@posicao,envia_byte_lcd@dado
  2592  001354  0E00               	movlw	0
  2593  001356  EC17  F00A         	call	_envia_byte_lcd
  2594  00135A  0012               	return		;funcret
  2595  00135C                     __end_of_caracter_inicio:
  2596                           	opt callstack 0
  2597                           
  2598 ;; *************** function _envia_byte_lcd *****************
  2599 ;; Defined at:
  2600 ;;		line 22 in file "lcd.c"
  2601 ;; Parameters:    Size  Location     Type
  2602 ;;  endereco        1    wreg     unsigned char 
  2603 ;;  dado            1    2[COMRAM] unsigned char 
  2604 ;; Auto vars:     Size  Location     Type
  2605 ;;  endereco        1    3[COMRAM] unsigned char 
  2606 ;; Return value:  Size  Location     Type
  2607 ;;                  1    wreg      void 
  2608 ;; Registers used:
  2609 ;;		wreg, status,2, status,0, cstack
  2610 ;; Tracked objects:
  2611 ;;		On entry : 0/0
  2612 ;;		On exit  : 0/0
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2615 ;;      Params:         1       0       0       0       0       0       0       0       0
  2616 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2617 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2618 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2619 ;;Total ram usage:        2 bytes
  2620 ;; Hardware stack levels used:    1
  2621 ;; Hardware stack levels required when called:    2
  2622 ;; This function calls:
  2623 ;;		_envia_nibble_lcd
  2624 ;; This function is called by:
  2625 ;;		_escreve_lcd
  2626 ;;		_inicializa_lcd
  2627 ;;		_caracter_inicio
  2628 ;;		_limpa_lcd
  2629 ;; This function uses a non-reentrant model
  2630 ;;
  2631                           
  2632                           	psect	text16
  2633  00142E                     __ptext16:
  2634                           	opt callstack 0
  2635  00142E                     _envia_byte_lcd:
  2636                           	opt callstack 22
  2637                           
  2638                           ;incstack = 0
  2639                           ;envia_byte_lcd@endereco stored from wreg
  2640  00142E  6E04               	movwf	envia_byte_lcd@endereco^0,c
  2641  001430                     
  2642                           ;lcd.c: 22: void envia_byte_lcd(char endereco,char dado);lcd.c: 23: {;lcd.c: 24:  PORTDb
      +                          its.RD0 = endereco;
  2643  001430  B004               	btfsc	envia_byte_lcd@endereco^0,0,c
  2644  001432  D002               	bra	u505
  2645  001434  9083               	bcf	131,0,c	;volatile
  2646  001436  D001               	bra	u506
  2647  001438                     u505:
  2648  001438  8083               	bsf	131,0,c	;volatile
  2649  00143A                     u506:
  2650  00143A                     
  2651                           ;lcd.c: 25:  _delay((unsigned long)((5)*(4000000/4000000.0)));
  2652  00143A  D000               	nop2		;2 cycle nop
  2653  00143C  D000               	nop2		;2 cycle nop
  2654  00143E  F000               	nop	
  2655  001440                     
  2656                           ;lcd.c: 26:  envia_nibble_lcd(dado>>4);
  2657  001440  3803               	swapf	envia_byte_lcd@dado^0,w,c
  2658  001442  0B0F               	andlw	15
  2659  001444  EC7E  F008         	call	_envia_nibble_lcd
  2660  001448                     
  2661                           ;lcd.c: 27:  envia_nibble_lcd(dado & 0x0f);
  2662  001448  5003               	movf	envia_byte_lcd@dado^0,w,c
  2663  00144A  0B0F               	andlw	15
  2664  00144C  EC7E  F008         	call	_envia_nibble_lcd
  2665  001450  0012               	return		;funcret
  2666  001452                     __end_of_envia_byte_lcd:
  2667                           	opt callstack 0
  2668                           
  2669 ;; *************** function _envia_nibble_lcd *****************
  2670 ;; Defined at:
  2671 ;;		line 4 in file "lcd.c"
  2672 ;; Parameters:    Size  Location     Type
  2673 ;;  dado            1    wreg     unsigned char 
  2674 ;; Auto vars:     Size  Location     Type
  2675 ;;  dado            1    1[COMRAM] unsigned char 
  2676 ;; Return value:  Size  Location     Type
  2677 ;;                  1    wreg      void 
  2678 ;; Registers used:
  2679 ;;		wreg, status,2, status,0
  2680 ;; Tracked objects:
  2681 ;;		On entry : 0/0
  2682 ;;		On exit  : 0/0
  2683 ;;		Unchanged: 0/0
  2684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2685 ;;      Params:         0       0       0       0       0       0       0       0       0
  2686 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2687 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2688 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2689 ;;Total ram usage:        2 bytes
  2690 ;; Hardware stack levels used:    1
  2691 ;; Hardware stack levels required when called:    1
  2692 ;; This function calls:
  2693 ;;		Nothing
  2694 ;; This function is called by:
  2695 ;;		_envia_byte_lcd
  2696 ;;		_inicializa_lcd
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           	psect	text17
  2701  0010FC                     __ptext17:
  2702                           	opt callstack 0
  2703  0010FC                     _envia_nibble_lcd:
  2704                           	opt callstack 22
  2705                           
  2706                           ;incstack = 0
  2707                           ;envia_nibble_lcd@dado stored from wreg
  2708  0010FC  6E02               	movwf	envia_nibble_lcd@dado^0,c
  2709  0010FE                     
  2710                           ;lcd.c: 4: void envia_nibble_lcd(char dado);lcd.c: 5: {;lcd.c: 6:   PORTDbits.RD1 = 1;
  2711  0010FE  8283               	bsf	131,1,c	;volatile
  2712  001100                     
  2713                           ;lcd.c: 7:   PORTDbits.RD4 = dado & 0x01;
  2714  001100  C002  F001         	movff	envia_nibble_lcd@dado,??_envia_nibble_lcd
  2715  001104  0E01               	movlw	1
  2716  001106  1601               	andwf	??_envia_nibble_lcd^0,f,c
  2717  001108  3A01               	swapf	??_envia_nibble_lcd^0,f,c
  2718  00110A  5083               	movf	131,w,c	;volatile
  2719  00110C  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  2720  00110E  0BEF               	andlw	-17
  2721  001110  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  2722  001112  6E83               	movwf	131,c	;volatile
  2723                           
  2724                           ;lcd.c: 8:   PORTDbits.RD5 = (dado >> 1) & 0x01;
  2725  001114  C002  F001         	movff	envia_nibble_lcd@dado,??_envia_nibble_lcd
  2726  001118  90D8               	bcf	status,0,c
  2727  00111A  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  2728  00111C  0E01               	movlw	1
  2729  00111E  1601               	andwf	??_envia_nibble_lcd^0,f,c
  2730  001120  3A01               	swapf	??_envia_nibble_lcd^0,f,c
  2731  001122  4601               	rlncf	??_envia_nibble_lcd^0,f,c
  2732  001124  5083               	movf	131,w,c	;volatile
  2733  001126  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  2734  001128  0BDF               	andlw	-33
  2735  00112A  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  2736  00112C  6E83               	movwf	131,c	;volatile
  2737                           
  2738                           ;lcd.c: 9:   PORTDbits.RD6 = (dado >> 2) & 0x01;
  2739  00112E  C002  F001         	movff	envia_nibble_lcd@dado,??_envia_nibble_lcd
  2740  001132  90D8               	bcf	status,0,c
  2741  001134  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  2742  001136  90D8               	bcf	status,0,c
  2743  001138  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  2744  00113A  0E01               	movlw	1
  2745  00113C  1601               	andwf	??_envia_nibble_lcd^0,f,c
  2746  00113E  3A01               	swapf	??_envia_nibble_lcd^0,f,c
  2747  001140  4601               	rlncf	??_envia_nibble_lcd^0,f,c
  2748  001142  4601               	rlncf	??_envia_nibble_lcd^0,f,c
  2749  001144  5083               	movf	131,w,c	;volatile
  2750  001146  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  2751  001148  0BBF               	andlw	-65
  2752  00114A  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  2753  00114C  6E83               	movwf	131,c	;volatile
  2754                           
  2755                           ;lcd.c: 10:   PORTDbits.RD7 = (dado >> 3) & 0x01;
  2756  00114E  C002  F001         	movff	envia_nibble_lcd@dado,??_envia_nibble_lcd
  2757  001152  90D8               	bcf	status,0,c
  2758  001154  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  2759  001156  90D8               	bcf	status,0,c
  2760  001158  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  2761  00115A  90D8               	bcf	status,0,c
  2762  00115C  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  2763  00115E  0E01               	movlw	1
  2764  001160  1601               	andwf	??_envia_nibble_lcd^0,f,c
  2765  001162  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  2766  001164  3201               	rrcf	??_envia_nibble_lcd^0,f,c
  2767  001166  5083               	movf	131,w,c	;volatile
  2768  001168  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  2769  00116A  0B7F               	andlw	-129
  2770  00116C  1801               	xorwf	??_envia_nibble_lcd^0,w,c
  2771  00116E  6E83               	movwf	131,c	;volatile
  2772  001170                     
  2773                           ;lcd.c: 13:   _delay((unsigned long)((50)*(4000000/4000000.0)));
  2774  001170  0E10               	movlw	16
  2775  001172                     u1047:
  2776  001172  2EE8               	decfsz	wreg,f,c
  2777  001174  D7FE               	bra	u1047
  2778  001176  D000               	nop2	
  2779  001178                     
  2780                           ;lcd.c: 14:   PORTDbits.RD1 = 0;
  2781  001178  9283               	bcf	131,1,c	;volatile
  2782  00117A                     
  2783                           ;lcd.c: 15:   _delay((unsigned long)((50)*(4000000/4000000.0)));
  2784  00117A  0E10               	movlw	16
  2785  00117C                     u1057:
  2786  00117C  2EE8               	decfsz	wreg,f,c
  2787  00117E  D7FE               	bra	u1057
  2788  001180  D000               	nop2	
  2789  001182  0012               	return		;funcret
  2790  001184                     __end_of_envia_nibble_lcd:
  2791                           	opt callstack 0
  2792                           
  2793 ;; *************** function _ISR *****************
  2794 ;; Defined at:
  2795 ;;		line 59 in file "LarguraDePulsoMain.c"
  2796 ;; Parameters:    Size  Location     Type
  2797 ;;		None
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;		None
  2800 ;; Return value:  Size  Location     Type
  2801 ;;                  1    wreg      void 
  2802 ;; Registers used:
  2803 ;;		wreg, status,2
  2804 ;; Tracked objects:
  2805 ;;		On entry : 0/0
  2806 ;;		On exit  : 0/0
  2807 ;;		Unchanged: 0/0
  2808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2809 ;;      Params:         0       0       0       0       0       0       0       0       0
  2810 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2811 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2812 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2813 ;;Total ram usage:        0 bytes
  2814 ;; Hardware stack levels used:    1
  2815 ;; This function calls:
  2816 ;;		Nothing
  2817 ;; This function is called by:
  2818 ;;		Interrupt level 2
  2819 ;; This function uses a non-reentrant model
  2820 ;;
  2821                           
  2822                           	psect	intcode
  2823  000008                     __pintcode:
  2824                           	opt callstack 0
  2825  000008                     _ISR:
  2826                           	opt callstack 19
  2827                           
  2828                           ;incstack = 0
  2829  000008  825F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  2830  00000A  EDE9  F009         	call	int_func,f	;refresh shadow registers
  2831                           
  2832                           	psect	intcode_body
  2833  0013D2                     __pintcode_body:
  2834                           	opt callstack 19
  2835  0013D2                     int_func:
  2836                           	opt callstack 19
  2837  0013D2  0006               	pop		; remove dummy address from shadow register refresh
  2838  0013D4                     
  2839                           ;LarguraDePulsoMain.c: 61:   if(INT0IF){
  2840  0013D4  A2F2               	btfss	4082,1,c	;volatile
  2841  0013D6  EFEF  F009         	goto	i2u97_41
  2842  0013DA  EFF1  F009         	goto	i2u97_40
  2843  0013DE                     i2u97_41:
  2844  0013DE  EF01  F00A         	goto	i2l45
  2845  0013E2                     i2u97_40:
  2846  0013E2                     
  2847                           ;LarguraDePulsoMain.c: 62:      INT0IF = 0;
  2848  0013E2  92F2               	bcf	4082,1,c	;volatile
  2849                           
  2850                           ;LarguraDePulsoMain.c: 63:      if (INTEDG0){
  2851  0013E4  ACF1               	btfss	4081,6,c	;volatile
  2852  0013E6  EFF7  F009         	goto	i2u98_41
  2853  0013EA  EFF9  F009         	goto	i2u98_40
  2854  0013EE                     i2u98_41:
  2855  0013EE  EFFE  F009         	goto	i2l43
  2856  0013F2                     i2u98_40:
  2857  0013F2                     
  2858                           ;LarguraDePulsoMain.c: 65:       TMR2 = 0;
  2859  0013F2  0E00               	movlw	0
  2860  0013F4  6ECC               	movwf	204,c	;volatile
  2861  0013F6                     
  2862                           ;LarguraDePulsoMain.c: 66:       INTEDG0 = 0;
  2863  0013F6  9CF1               	bcf	4081,6,c	;volatile
  2864                           
  2865                           ;LarguraDePulsoMain.c: 67:      } else {
  2866  0013F8  EF01  F00A         	goto	i2l45
  2867  0013FC                     i2l43:
  2868                           
  2869                           ;LarguraDePulsoMain.c: 69:       contador = TMR2;
  2870  0013FC  CFCC F068          	movff	4044,_contador	;volatile
  2871                           
  2872                           ;LarguraDePulsoMain.c: 70:       INTEDG0 = 1;
  2873  001400  8CF1               	bsf	4081,6,c	;volatile
  2874  001402                     i2l45:
  2875  001402  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2876  001404  0011               	retfie		f
  2877  001406                     __end_of_ISR:
  2878                           	opt callstack 0
  2879                           
  2880                           	psect	rparam
  2881  0000                     
  2882                           	psect	temp
  2883  00005F                     btemp:
  2884                           	opt callstack 0
  2885  00005F                     	ds	1
  2886  0000                     int$flags	set	btemp
  2887  0000                     wtemp8	set	btemp+1
  2888  0000                     ttemp5	set	btemp+1
  2889  0000                     ttemp6	set	btemp+4
  2890  0000                     ttemp7	set	btemp+8
  2891                           tosu	equ	0xFFF
  2892                           tosh	equ	0xFFE
  2893                           tosl	equ	0xFFD
  2894                           stkptr	equ	0xFFC
  2895                           pclatu	equ	0xFFB
  2896                           pclath	equ	0xFFA
  2897                           pcl	equ	0xFF9
  2898                           tblptru	equ	0xFF8
  2899                           tblptrh	equ	0xFF7
  2900                           tblptrl	equ	0xFF6
  2901                           tablat	equ	0xFF5
  2902                           prodh	equ	0xFF4
  2903                           prodl	equ	0xFF3
  2904                           indf0	equ	0xFEF
  2905                           postinc0	equ	0xFEE
  2906                           postdec0	equ	0xFED
  2907                           preinc0	equ	0xFEC
  2908                           plusw0	equ	0xFEB
  2909                           fsr0h	equ	0xFEA
  2910                           fsr0l	equ	0xFE9
  2911                           wreg	equ	0xFE8
  2912                           indf1	equ	0xFE7
  2913                           postinc1	equ	0xFE6
  2914                           postdec1	equ	0xFE5
  2915                           preinc1	equ	0xFE4
  2916                           plusw1	equ	0xFE3
  2917                           fsr1h	equ	0xFE2
  2918                           fsr1l	equ	0xFE1
  2919                           bsr	equ	0xFE0
  2920                           indf2	equ	0xFDF
  2921                           postinc2	equ	0xFDE
  2922                           postdec2	equ	0xFDD
  2923                           preinc2	equ	0xFDC
  2924                           plusw2	equ	0xFDB
  2925                           fsr2h	equ	0xFDA
  2926                           fsr2l	equ	0xFD9
  2927                           status	equ	0xFD8


Data Sizes:
    Strings     27
    Constant    0
    Data        0
    BSS         41
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     94      94
    BANK0           160      8      49
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[13]), STR_1(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S815_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[13]), STR_1(CODE[14]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 14
		 -> STR_2(CODE[13]), STR_1(CODE[14]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 


Critical Paths under _main in COMRAM

    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_escreve_lcd
    _escreve_lcd->_envia_byte_lcd
    _abs->___aomod
    _inicializa_lcd->_envia_byte_lcd
    _caracter_inicio->_envia_byte_lcd
    _envia_byte_lcd->_envia_nibble_lcd

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   10029
                                             93 COMRAM     1     1      0
                    _caracter_inicio
                     _inicializa_lcd
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                               8     4      4    8303
                                              0 BANK0      8     4      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    8097
                                             85 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    7743
                                             69 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    5686
                                             33 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    4037
                                             22 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     166
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1899
                                             15 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4    1498
                                              6 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     730
                                              5 COMRAM     1     1      0
                        _escreve_lcd
 ---------------------------------------------------------------------------------
 (6) _escreve_lcd                                          1     1      0     708
                                              4 COMRAM     1     1      0
                     _envia_byte_lcd
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                             18 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     448
                                              0 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     452
                                              0 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _inicializa_lcd                                       1     1      0     774
                                              4 COMRAM     1     1      0
                     _envia_byte_lcd
                   _envia_nibble_lcd
 ---------------------------------------------------------------------------------
 (1) _caracter_inicio                                      3     2      1     952
                                              4 COMRAM     3     2      1
                     _envia_byte_lcd
 ---------------------------------------------------------------------------------
 (7) _envia_byte_lcd                                       2     1      1     686
                                              2 COMRAM     2     1      1
                   _envia_nibble_lcd
 ---------------------------------------------------------------------------------
 (8) _envia_nibble_lcd                                     2     2      0      88
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _caracter_inicio
     _envia_byte_lcd
       _envia_nibble_lcd
   _inicializa_lcd
     _envia_byte_lcd
       _envia_nibble_lcd
     _envia_nibble_lcd
   _printf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
                 _escreve_lcd
                   _envia_byte_lcd
                     _envia_nibble_lcd
             _fputs
               _fputc
                 _putch
                   _escreve_lcd
                     _envia_byte_lcd
                       _envia_nibble_lcd
             _strlen
         _fputc
           _putch
             _escreve_lcd
               _envia_byte_lcd
                 _envia_nibble_lcd

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      8      31       5       30.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     5E      5E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8F      20        0.0%
DATA                 0      0      8F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Jul 16 17:02:41 2022

                       l27 1486                         l52 1182                         l55 1450  
                       l64 1204                         l58 147C                         l69 135A  
                       l96 0FE6                         l99 1028                        l101 1064  
                      l107 08BE                        l140 12CC                        l109 08C6  
                      l141 12D4                        l134 0CB2                        l127 0AFE  
                      l271 0F9E                        l258 0E3A                        l822 139A  
                      l834 10FA                        l842 1318                        l819 1392  
                      l855 13D0                        l849 142C                        u510 1078  
                      u511 1074                        u520 108A                        u600 1038  
                      u505 1438                        u521 1086                        u601 1034  
                      u506 143A                        u610 1376                        u530 10B2  
                      u611 1372                        u531 10AE                        u620 0CC6  
                      u700 0E80                        u540 10E8                        _ISR 0008  
                      u621 0CC2                        u701 0E7C                        u541 10E4  
                      u630 0CF8                        u710 0EBE                        u550 1318  
                      u631 0CF4                        u711 0EBA                        u551 1314  
                      u720 0EE8                        u560 13C4                        u800 08E0  
                      u641 0D22                        u721 0EE4                        u561 13C0  
                      u801 08DC                        u650 0D46                        u730 0F16  
                      u570 0FB0                        u810 08EE                        u651 0D42  
                      u731 0F12                        u571 0FAC                        u811 08EA  
                      u660 0D70                        u740 0F5E                        u580 0FD2  
                      u820 0A16                        u900 0B24                        u661 0D6C  
                      u741 0F5A                        u581 0FCE                        u821 0A12  
                      u901 0B20                        u670 0DB0                        u590 1028  
                      u830 0A34                        u750 084E                        u910 0B6C  
                      u671 0DAC                        u591 1024                        u831 0A30  
                      u751 0848                        u911 0B68                        u680 0DFA  
                      u840 0A4E                        u760 0850                        u920 0B90  
                      u681 0DF6                        u841 0A4A                        u921 0B8C  
                      u690 0E4E                        u850 0A68                        u770 0866  
                      u930 0C34                        u691 0E4A                        u851 0A64  
                      u771 0862                        u931 0C30                        u860 0A78  
                      u780 0896                        u940 12CC                        u861 0A74  
                      u781 0892                        u941 12C8                        u950 1330  
                      u870 0A8A                        u790 08B2                        u951 132C  
                      u871 0A86                        u791 08AE                        u960 1346  
                      u880 0A9A                        u961 1342                        u881 0A96  
                      u890 0AB2                        u891 0AAE                        u997 1222  
                      _abs 135C                        _pad 0FA0                        wreg 000FE8  
             __CFG_LVP$OFF 000000                       ?_ISR 0001               __CFG_WDT$OFF 000000  
                     l1211 1100                       ?_abs 0013                       l1213 1170  
                     l1221 143A                       l1301 0D18                       l1215 1178  
                     l1223 1440                       l1311 0D62                       l1303 0D1C  
                     l1231 1066                       l1217 117A                       l1209 10FE  
                     l1225 1448                       l1321 0DD2                       l1313 0D70  
                     l1305 0D28                       l1241 10E8                       l1233 1078  
                     l1401 0998                       l1219 1430                       l1323 0DE4  
                     l1315 0D82                       l1307 0D46                       l1227 1472  
                     l1235 108A                       l1251 12F8                       l1411 0A68  
                     l1403 09FC                       l1501 11FA                       l1317 0DB0  
                     l1309 0D4E                       l1325 0DEA                       l1341 0E72  
                     l1333 0E3C                       l1229 1480                       l1237 1094  
                     l1245 12D6                       l1253 139C                       l1421 0AB2  
                     l1405 0A16                       l1413 0A78                       l1511 1346  
                     l1503 131C                       l1327 0DFA                       l1319 0DD0  
                     l1351 0EDA                       l1343 0E80                       l1335 0E40  
                     l1239 10B2                       l1247 12E2                       l1255 13A8  
                     l1271 0FDE                       l1263 0FA0                       l1423 0ABE  
                     l1415 0A8A                       l1407 0A34                       l1431 0B00  
                     l1513 134A                       l1505 1320                       l1329 0E1A  
                     l1353 0EE8                       l1361 0F4E                       l1345 0EA0  
                     l1337 0E4E                       l1249 12F4                       l1257 13AC  
                     l1281 104C                       l1273 0FF2                       l1265 0FB0  
                     l1425 0AC6                       l1417 0A9A                       l1409 0A4E  
                     l1441 0B6C                       l1433 0B24                       l1515 1350  
                     l1507 1330                       l1291 0CB8                       l1363 0F5E  
                     l1355 0F16                       l1347 0EBE                       l1339 0E6E  
                     l1259 13C4                       l1275 1006                       l1267 0FC4  
                     l1419 0AA0                       l1427 0AD6                       l1371 083E  
                     l1451 0C34                       l1443 0B90                       l1435 0B32  
                     l1531 1214                       l1523 1206                       l1509 1334  
                     l1293 0CC6                       l1365 0F7E                       l1357 0F36  
                     l1349 0EC6                       l1285 135C                       l1277 100A  
                     l1269 0FD2                       l1381 08B2                       l1373 0866  
                     l1461 0C70                       l1453 0C42                       l1445 0BD8  
                     l1437 0B44                       l1517 1406                       l1541 122A  
                     l1533 1216                       l1525 120A                       l1295 0CE6  
                     l1359 0F48                       l1287 1376                       l1279 1038  
                     l1391 08FC                       l1383 08CE                       l1375 0886  
                     l1455 0C56                       l1439 0B48                       l1519 1410  
                     l1543 1234                       l1535 1218                       l1527 120E  
                     l1481 1184                       l1297 0CEA                       l1289 0CB4  
                     l1393 0904                       l1385 08E0                       l1377 0896  
                     l1369 081E                       l1449 0C10                       l1465 0C7C  
                     l1473 1274                       l1545 1248                       l1537 121A  
                     l1529 1212                       l1491 11C2                       l1483 118E  
                     l1299 0CF8                       l1395 090A                       l1387 08EE  
                     l1379 0898                       l1467 0CA0                       l1459 0C62  
                     l1475 127C                       l1547 1252                       l1539 121C  
                     l1493 11C8                       l1485 119E                       l1397 098C  
                     l1389 08F4                       l1477 128A                       l1495 11CE  
                     l1487 11A4                       l1399 0992                       l1479 12B0  
                     l1497 11E6                       l1489 11BA                       l1499 11F0  
                     ?_pad 0017                       STR_1 0801                       STR_2 080F  
                     u1007 1194                       u1017 11AA                       u1027 11BC  
                     u1037 11DE                       u1047 1172                       u1057 117C  
                     i2l43 13FC                       i2l45 1402                       _TMR2 000FCC  
             ?_escreve_lcd 0001     envia_byte_lcd@endereco 0004                       abs@a 0013  
                     _dbuf 0069                       _main 1206                       _dtoa 081E  
                     _prec 0064                       _nout 0060                       pad@i 001E  
                     pad@p 001B                       fsr1h 000FE2                       fsr2h 000FDA  
                     indf2 000FDF                       fsr1l 000FE1                       pad@w 0020  
                     fsr2l 000FD9                       btemp 005F                       prodh 000FF4  
                     prodl 000FF3                       start 000E              __CFG_MCLRE$ON 000000  
  __end_of_caracter_inicio 135C               ___param_bank 000000                      ??_ISR 0001  
                    ??_abs 0015                      ??_pad 001D            __end_of___aodiv 0E3C  
                    ?_main 0001                      ?_dtoa 0022            __end_of___aomod 0FA0  
             vfpfcnvrt@fmt 0048                      _TRISD 000F95    __size_of_envia_byte_lcd 0024  
                    _flags 0066                      _fputc 1066                      _fputs 12D6  
                    pad@fp 0017                      _width 0062                      _putch 147E  
                    dtoa@d 0024                      dtoa@i 0044                      dtoa@n 003C  
                    dtoa@p 0036                      dtoa@s 003A                      dtoa@w 0038  
                    tablat 000FF5                      ttemp5 0060                      ttemp6 0063  
                    ttemp7 0067                      status 000FD8                      wtemp8 0060  
          __initialization 1452               __end_of_main 1274               __end_of_dtoa 0B00  
                   ??_main 005E                     ??_dtoa 002C              __activetblptr 000001  
                   ?_fputc 0007                     ?_fputs 0010                     ?_putch 0001  
                   _INT0IF 007F91                     i2l1551 13E2                     i2l1553 13F2  
                   i2l1555 13F6                     i2l1549 13D4    __size_of_inicializa_lcd 0082  
         _envia_nibble_lcd 10FC               vfprintf@cfmt 005C           ?_caracter_inicio 0005  
                ??___aodiv 0011                  ??___aomod 0011                     clear_0 1458  
                   _printf 1406                     pad@buf 0019                     dtoa@fp 0022  
                   _strlen 139C                     fputc@c 0007                     fputs@c 0014  
                   fputs@i 0015                     fputs@s 0010               __mediumconst 0000  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
         __end_of_vfprintf 12D6                 __accesstop 0060    __end_of__initialization 145E  
       envia_byte_lcd@dado 0003            __CFG_PBADEN$OFF 000000            __CFG_FOSC$XT_XT 000000  
     __size_of_escreve_lcd 000E              ___rparam_used 000001               escreve_lcd@c 0005  
           __pcstackCOMRAM 0001              __end_of_fputc 10FC              __end_of_fputs 131A  
            __end_of_putch 1488             _envia_byte_lcd 142E                    ??_fputc 000B  
                  ??_fputs 0014                    ??_putch 0006                 __pbssBANK0 0060  
                  ?_printf 0089                    ?_strlen 0001     __end_of_envia_byte_lcd 1452  
                  _INTEDG0 007F8E         __size_of_vfpfcnvrt 01B4                    i2u97_40 13E2  
                  i2u97_41 13DE                    i2u98_40 13F2                    i2u98_41 13EE  
           _inicializa_lcd 1184                    __Hparam 0000       caracter_inicio@linha 0006  
                  __Lparam 0000                    ___aodiv 0CB4                    ___aomod 0E3C  
                ?_vfprintf 0056               __psmallconst 0800                    __pcinit 1452  
                  __ramtop 0800                    __ptext0 1206                    __ptext1 1406  
                  __ptext2 1274                    __ptext3 0B00                    __ptext4 081E  
                  __ptext5 0FA0                    __ptext6 139C                    __ptext7 12D6  
                  __ptext8 1066                    __ptext9 147E            __size_of_printf 0028  
          __size_of_strlen 0036               __size_of_ISR 13FE                  _T2CONbits 000FCA  
             __size_of_abs 0040            ?_envia_byte_lcd 0003               __size_of_pad 00C6  
 __end_of_envia_nibble_lcd 1184     __end_of_inicializa_lcd 1206             __pintcode_body 13D2  
     end_of_initialization 145E                    fputc@fp 0009                    int_func 13D2  
                  fputs@fp 0012          __end_of_vfpfcnvrt 0CB4                    postdec2 000FDD  
                  postinc0 000FEE                    postinc1 000FE6                    postinc2 000FDE  
               ??_vfprintf 005C                    strlen@a 0003                    strlen@s 0001  
                _PORTDbits 000F83                  _TRISBbits 000F93            ?_inicializa_lcd 0001  
              vfpfcnvrt@ap 004A                vfpfcnvrt@fp 0046                vfpfcnvrt@ll 004E  
 __size_of_caracter_inicio 0042             __end_of_printf 142E             __end_of_strlen 13D2  
      start_initialization 1452                __end_of_ISR 1406                __end_of_abs 139C  
              __end_of_pad 1066              ??_escreve_lcd 0005     caracter_inicio@posicao 0007  
              vfprintf@fmt 0058                   ??_printf 005E                   ??_strlen 0003  
            __pcstackBANK0 0089           ___aodiv@dividend 0001        __end_of_escreve_lcd 147E  
                __pintcode 0008                   ?___aodiv 0001                   ?___aomod 0001  
         ___aodiv@quotient 0013           ??_envia_byte_lcd 0004          __size_of_vfprintf 0062  
              __smallconst 0800          ?_envia_nibble_lcd 0001          ??_caracter_inicio 0006  
           __size_of_fputc 0096             __size_of_fputs 0044             __size_of_putch 000A  
       ??_envia_nibble_lcd 0001                  _vfpfcnvrt 0B00           ??_inicializa_lcd 0005  
              _escreve_lcd 1470      caracter_inicio@coluna 0005                   __Hrparam 0000  
               vfprintf@ap 005A                   __Lrparam 0000                 vfprintf@fp 0056  
             __Lsmallconst 0800           __size_of___aodiv 0188           __size_of___aomod 0164  
               ?_vfpfcnvrt 0046            ___aodiv@divisor 0009            ___aodiv@counter 0011  
                 _dtoa$354 0034                   __ptext10 1470                   __ptext11 135C  
                 __ptext12 0E3C                   __ptext13 0CB4                   __ptext14 1184  
                 __ptext15 131A                   __ptext16 142E                   __ptext17 10FC  
                 _contador 0068              __size_of_main 006E              __size_of_dtoa 02E2  
                 int$flags 005F                   _vfprintf 1274                  printf@fmt 0089  
         ___aomod@dividend 0001                  putch@data 0006                 _INTCONbits 000FF2  
                 intlevel2 0000                   printf@ap 008F            ___aomod@divisor 0009  
              ??_vfpfcnvrt 004C            ___aomod@counter 0011            _caracter_inicio 131A  
     envia_nibble_lcd@dado 0002               ___aodiv@sign 0012               ___aomod@sign 0012  
__size_of_envia_nibble_lcd 0088  
